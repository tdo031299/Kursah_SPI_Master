
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002320  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080023e0  080023e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002450  08002450  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002450  08002450  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002450  08002450  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002450  08002450  00012450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002454  08002454  00012454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08002464  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002464  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a05d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016bb  00000000  00000000  0002a091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002b750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002bf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001182b  00000000  00000000  0002c668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a089  00000000  00000000  0003de93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a62f  00000000  00000000  00047f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b254b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b04  00000000  00000000  000b25a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023c8 	.word	0x080023c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080023c8 	.word	0x080023c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <rx>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int rx(unsigned char *r) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	int result = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
	if (HAL_UART_Receive(&huart1, r, 1, 500) == HAL_OK) {
 800022c:	23fa      	movs	r3, #250	; 0xfa
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	6879      	ldr	r1, [r7, #4]
 8000232:	4806      	ldr	r0, [pc, #24]	; (800024c <rx+0x2c>)
 8000234:	2201      	movs	r2, #1
 8000236:	f001 fcbf 	bl	8001bb8 <HAL_UART_Receive>
 800023a:	1e03      	subs	r3, r0, #0
 800023c:	d101      	bne.n	8000242 <rx+0x22>
		result = 1;
 800023e:	2301      	movs	r3, #1
 8000240:	60fb      	str	r3, [r7, #12]
	}
	return result;
 8000242:	68fb      	ldr	r3, [r7, #12]
}
 8000244:	0018      	movs	r0, r3
 8000246:	46bd      	mov	sp, r7
 8000248:	b004      	add	sp, #16
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000002c 	.word	0x2000002c

08000250 <halfhex2char>:
	ST_M3,
	ST_Dn,
};
enum state_list main_state;

static char halfhex2char(char c) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	701a      	strb	r2, [r3, #0]
	char s;
	if (c >= '0' && c <= '9')
 800025c:	1dfb      	adds	r3, r7, #7
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b2f      	cmp	r3, #47	; 0x2f
 8000262:	d90a      	bls.n	800027a <halfhex2char+0x2a>
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b39      	cmp	r3, #57	; 0x39
 800026a:	d806      	bhi.n	800027a <halfhex2char+0x2a>
		s = c - '0';
 800026c:	230f      	movs	r3, #15
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	1dfa      	adds	r2, r7, #7
 8000272:	7812      	ldrb	r2, [r2, #0]
 8000274:	3a30      	subs	r2, #48	; 0x30
 8000276:	701a      	strb	r2, [r3, #0]
 8000278:	e00d      	b.n	8000296 <halfhex2char+0x46>
	else {
		if (c >= 'A' && c <= 'F')
 800027a:	1dfb      	adds	r3, r7, #7
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b40      	cmp	r3, #64	; 0x40
 8000280:	d909      	bls.n	8000296 <halfhex2char+0x46>
 8000282:	1dfb      	adds	r3, r7, #7
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b46      	cmp	r3, #70	; 0x46
 8000288:	d805      	bhi.n	8000296 <halfhex2char+0x46>
			s = c - 'A' + 10;
 800028a:	230f      	movs	r3, #15
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	1dfa      	adds	r2, r7, #7
 8000290:	7812      	ldrb	r2, [r2, #0]
 8000292:	3a37      	subs	r2, #55	; 0x37
 8000294:	701a      	strb	r2, [r3, #0]
	}
	return s;
 8000296:	230f      	movs	r3, #15
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	781b      	ldrb	r3, [r3, #0]
}
 800029c:	0018      	movs	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	b004      	add	sp, #16
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <hex2char>:

static char hex2char(char c1, char c2) {
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	0002      	movs	r2, r0
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	701a      	strb	r2, [r3, #0]
 80002b0:	1dbb      	adds	r3, r7, #6
 80002b2:	1c0a      	adds	r2, r1, #0
 80002b4:	701a      	strb	r2, [r3, #0]
	return (halfhex2char(c1) << 4) + halfhex2char(c2);
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	0018      	movs	r0, r3
 80002bc:	f7ff ffc8 	bl	8000250 <halfhex2char>
 80002c0:	0003      	movs	r3, r0
 80002c2:	011b      	lsls	r3, r3, #4
 80002c4:	b2dc      	uxtb	r4, r3
 80002c6:	1dbb      	adds	r3, r7, #6
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	0018      	movs	r0, r3
 80002cc:	f7ff ffc0 	bl	8000250 <halfhex2char>
 80002d0:	0003      	movs	r3, r0
 80002d2:	18e3      	adds	r3, r4, r3
 80002d4:	b2db      	uxtb	r3, r3
}
 80002d6:	0018      	movs	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	b003      	add	sp, #12
 80002dc:	bd90      	pop	{r4, r7, pc}
	...

080002e0 <SPI1_Init_Clk>:

static void SPI1_Init_Clk(uint32_t CLKPolarity, uint32_t CLKPhase) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80002ea:	4b1c      	ldr	r3, [pc, #112]	; (800035c <SPI1_Init_Clk+0x7c>)
 80002ec:	4a1c      	ldr	r2, [pc, #112]	; (8000360 <SPI1_Init_Clk+0x80>)
 80002ee:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <SPI1_Init_Clk+0x7c>)
 80002f2:	2282      	movs	r2, #130	; 0x82
 80002f4:	0052      	lsls	r2, r2, #1
 80002f6:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <SPI1_Init_Clk+0x7c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002fe:	4b17      	ldr	r3, [pc, #92]	; (800035c <SPI1_Init_Clk+0x7c>)
 8000300:	22e0      	movs	r2, #224	; 0xe0
 8000302:	00d2      	lsls	r2, r2, #3
 8000304:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = CLKPolarity;
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <SPI1_Init_Clk+0x7c>)
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = CLKPhase;
 800030c:	4b13      	ldr	r3, [pc, #76]	; (800035c <SPI1_Init_Clk+0x7c>)
 800030e:	683a      	ldr	r2, [r7, #0]
 8000310:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <SPI1_Init_Clk+0x7c>)
 8000314:	2280      	movs	r2, #128	; 0x80
 8000316:	0092      	lsls	r2, r2, #2
 8000318:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <SPI1_Init_Clk+0x7c>)
 800031c:	2238      	movs	r2, #56	; 0x38
 800031e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000320:	4b0e      	ldr	r3, [pc, #56]	; (800035c <SPI1_Init_Clk+0x7c>)
 8000322:	2200      	movs	r2, #0
 8000324:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <SPI1_Init_Clk+0x7c>)
 8000328:	2200      	movs	r2, #0
 800032a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800032c:	4b0b      	ldr	r3, [pc, #44]	; (800035c <SPI1_Init_Clk+0x7c>)
 800032e:	2200      	movs	r2, #0
 8000330:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <SPI1_Init_Clk+0x7c>)
 8000334:	2207      	movs	r2, #7
 8000336:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <SPI1_Init_Clk+0x7c>)
 800033a:	2200      	movs	r2, #0
 800033c:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <SPI1_Init_Clk+0x7c>)
 8000340:	2208      	movs	r2, #8
 8000342:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <SPI1_Init_Clk+0x7c>)
 8000346:	0018      	movs	r0, r3
 8000348:	f001 fb2a 	bl	80019a0 <HAL_SPI_Init>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d001      	beq.n	8000354 <SPI1_Init_Clk+0x74>
		Error_Handler();
 8000350:	f000 fa2c 	bl	80007ac <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b002      	add	sp, #8
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200000b0 	.word	0x200000b0
 8000360:	40013000 	.word	0x40013000

08000364 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	main_state = ST_RESET;
 800036a:	4b89      	ldr	r3, [pc, #548]	; (8000590 <main+0x22c>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000370:	f000 fb26 	bl	80009c0 <HAL_Init>
	//unsigned char recieve[10];
	//unsigned char byt[2];
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000374:	f000 f910 	bl	8000598 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000378:	f000 f9de 	bl	8000738 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800037c:	f000 f9ac 	bl	80006d8 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8000380:	f000 f96c 	bl	800065c <MX_SPI1_Init>
		 }


		 */

		if (rx(&c)) {
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	0018      	movs	r0, r3
 8000388:	f7ff ff4a 	bl	8000220 <rx>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d100      	bne.n	8000392 <main+0x2e>
 8000390:	e0fc      	b.n	800058c <main+0x228>
			switch (main_state) {
 8000392:	4b7f      	ldr	r3, [pc, #508]	; (8000590 <main+0x22c>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b0d      	cmp	r3, #13
 8000398:	d900      	bls.n	800039c <main+0x38>
 800039a:	e0f3      	b.n	8000584 <main+0x220>
 800039c:	009a      	lsls	r2, r3, #2
 800039e:	4b7d      	ldr	r3, [pc, #500]	; (8000594 <main+0x230>)
 80003a0:	18d3      	adds	r3, r2, r3
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	469f      	mov	pc, r3
			case ST_RESET:
				switch (c) {
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b4d      	cmp	r3, #77	; 0x4d
 80003ac:	d00c      	beq.n	80003c8 <main+0x64>
 80003ae:	dc0f      	bgt.n	80003d0 <main+0x6c>
 80003b0:	2b43      	cmp	r3, #67	; 0x43
 80003b2:	d005      	beq.n	80003c0 <main+0x5c>
 80003b4:	2b44      	cmp	r3, #68	; 0x44
 80003b6:	d10b      	bne.n	80003d0 <main+0x6c>
				case 'D':
					main_state = ST_D1;
 80003b8:	4b75      	ldr	r3, [pc, #468]	; (8000590 <main+0x22c>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	701a      	strb	r2, [r3, #0]
					break;
 80003be:	e00b      	b.n	80003d8 <main+0x74>
				case 'C':
					main_state = ST_C;
 80003c0:	4b73      	ldr	r3, [pc, #460]	; (8000590 <main+0x22c>)
 80003c2:	2204      	movs	r2, #4
 80003c4:	701a      	strb	r2, [r3, #0]
					break;
 80003c6:	e007      	b.n	80003d8 <main+0x74>
				case 'M':
					main_state = ST_M;
 80003c8:	4b71      	ldr	r3, [pc, #452]	; (8000590 <main+0x22c>)
 80003ca:	2205      	movs	r2, #5
 80003cc:	701a      	strb	r2, [r3, #0]
					break;
 80003ce:	e003      	b.n	80003d8 <main+0x74>
					 HAL_SPI_Transmit(&hspi1, recieve, idx, 500);
					 idx = 0;
					 break;
					 */
				default:
					main_state = ST_RESET;
 80003d0:	4b6f      	ldr	r3, [pc, #444]	; (8000590 <main+0x22c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80003d6:	e0da      	b.n	800058e <main+0x22a>
 80003d8:	e0d9      	b.n	800058e <main+0x22a>

			case ST_C:
				switch (c) {
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b53      	cmp	r3, #83	; 0x53
 80003e0:	d102      	bne.n	80003e8 <main+0x84>
				case 'S':
					main_state = ST_CS;
 80003e2:	4b6b      	ldr	r3, [pc, #428]	; (8000590 <main+0x22c>)
 80003e4:	2206      	movs	r2, #6
 80003e6:	701a      	strb	r2, [r3, #0]
				default:
					main_state = ST_RESET;
 80003e8:	4b69      	ldr	r3, [pc, #420]	; (8000590 <main+0x22c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
				}
				break;
 80003ee:	e0ce      	b.n	800058e <main+0x22a>

			case ST_CS:
				switch (c) {
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b30      	cmp	r3, #48	; 0x30
 80003f6:	d002      	beq.n	80003fe <main+0x9a>
 80003f8:	2b31      	cmp	r3, #49	; 0x31
 80003fa:	d004      	beq.n	8000406 <main+0xa2>
 80003fc:	e007      	b.n	800040e <main+0xaa>
				case '0':
					main_state = ST_CSn0;
 80003fe:	4b64      	ldr	r3, [pc, #400]	; (8000590 <main+0x22c>)
 8000400:	2207      	movs	r2, #7
 8000402:	701a      	strb	r2, [r3, #0]
					break;
 8000404:	e007      	b.n	8000416 <main+0xb2>
				case '1':
					main_state = ST_CSn1;
 8000406:	4b62      	ldr	r3, [pc, #392]	; (8000590 <main+0x22c>)
 8000408:	2208      	movs	r2, #8
 800040a:	701a      	strb	r2, [r3, #0]
					break;
 800040c:	e003      	b.n	8000416 <main+0xb2>
				default:
					main_state = ST_RESET;
 800040e:	4b60      	ldr	r3, [pc, #384]	; (8000590 <main+0x22c>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000414:	e0bb      	b.n	800058e <main+0x22a>
 8000416:	e0ba      	b.n	800058e <main+0x22a>

			case ST_CSn0:
				switch (c) {
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b0a      	cmp	r3, #10
 800041e:	d10b      	bne.n	8000438 <main+0xd4>
				case '\n':
					HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin,
 8000420:	2390      	movs	r3, #144	; 0x90
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2200      	movs	r2, #0
 8000426:	2110      	movs	r1, #16
 8000428:	0018      	movs	r0, r3
 800042a:	f000 fd51 	bl	8000ed0 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					main_state = ST_RESET;
 800042e:	4b58      	ldr	r3, [pc, #352]	; (8000590 <main+0x22c>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
					break;
 8000434:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 8000436:	e0aa      	b.n	800058e <main+0x22a>
					main_state = ST_RESET;
 8000438:	4b55      	ldr	r3, [pc, #340]	; (8000590 <main+0x22c>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
				break;
 800043e:	e0a6      	b.n	800058e <main+0x22a>

			case ST_CSn1:
				switch (c) {
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b0a      	cmp	r3, #10
 8000446:	d10b      	bne.n	8000460 <main+0xfc>
				case '\n':
					HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin,
 8000448:	2390      	movs	r3, #144	; 0x90
 800044a:	05db      	lsls	r3, r3, #23
 800044c:	2201      	movs	r2, #1
 800044e:	2110      	movs	r1, #16
 8000450:	0018      	movs	r0, r3
 8000452:	f000 fd3d 	bl	8000ed0 <HAL_GPIO_WritePin>
							GPIO_PIN_SET);
					main_state = ST_RESET;
 8000456:	4b4e      	ldr	r3, [pc, #312]	; (8000590 <main+0x22c>)
 8000458:	2200      	movs	r2, #0
 800045a:	701a      	strb	r2, [r3, #0]
					break;
 800045c:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 800045e:	e096      	b.n	800058e <main+0x22a>
					main_state = ST_RESET;
 8000460:	4b4b      	ldr	r3, [pc, #300]	; (8000590 <main+0x22c>)
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
				break;
 8000466:	e092      	b.n	800058e <main+0x22a>

			case ST_M:
				switch (c) {
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b33      	cmp	r3, #51	; 0x33
 800046e:	d014      	beq.n	800049a <main+0x136>
 8000470:	dc17      	bgt.n	80004a2 <main+0x13e>
 8000472:	2b32      	cmp	r3, #50	; 0x32
 8000474:	d00d      	beq.n	8000492 <main+0x12e>
 8000476:	dc14      	bgt.n	80004a2 <main+0x13e>
 8000478:	2b30      	cmp	r3, #48	; 0x30
 800047a:	d002      	beq.n	8000482 <main+0x11e>
 800047c:	2b31      	cmp	r3, #49	; 0x31
 800047e:	d004      	beq.n	800048a <main+0x126>
 8000480:	e00f      	b.n	80004a2 <main+0x13e>
				case '0':
					main_state = ST_M0;
 8000482:	4b43      	ldr	r3, [pc, #268]	; (8000590 <main+0x22c>)
 8000484:	2209      	movs	r2, #9
 8000486:	701a      	strb	r2, [r3, #0]
					break;
 8000488:	e00f      	b.n	80004aa <main+0x146>
				case '1':
					main_state = ST_M1;
 800048a:	4b41      	ldr	r3, [pc, #260]	; (8000590 <main+0x22c>)
 800048c:	220a      	movs	r2, #10
 800048e:	701a      	strb	r2, [r3, #0]
					break;
 8000490:	e00b      	b.n	80004aa <main+0x146>
				case '2':
					main_state = ST_M2;
 8000492:	4b3f      	ldr	r3, [pc, #252]	; (8000590 <main+0x22c>)
 8000494:	220b      	movs	r2, #11
 8000496:	701a      	strb	r2, [r3, #0]
					break;
 8000498:	e007      	b.n	80004aa <main+0x146>
				case '3':
					main_state = ST_M3;
 800049a:	4b3d      	ldr	r3, [pc, #244]	; (8000590 <main+0x22c>)
 800049c:	220c      	movs	r2, #12
 800049e:	701a      	strb	r2, [r3, #0]
					break;
 80004a0:	e003      	b.n	80004aa <main+0x146>
				default:
					main_state = ST_RESET;
 80004a2:	4b3b      	ldr	r3, [pc, #236]	; (8000590 <main+0x22c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
				}
				break;
 80004a8:	e071      	b.n	800058e <main+0x22a>
 80004aa:	e070      	b.n	800058e <main+0x22a>

			case ST_M0:
				switch (c) {
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b0a      	cmp	r3, #10
 80004b2:	d108      	bne.n	80004c6 <main+0x162>
				case '\n':
					SPI1_Init_Clk(SPI_POLARITY_LOW, SPI_PHASE_1EDGE);
 80004b4:	2100      	movs	r1, #0
 80004b6:	2000      	movs	r0, #0
 80004b8:	f7ff ff12 	bl	80002e0 <SPI1_Init_Clk>
					main_state = ST_RESET;
 80004bc:	4b34      	ldr	r3, [pc, #208]	; (8000590 <main+0x22c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
					break;
 80004c2:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 80004c4:	e063      	b.n	800058e <main+0x22a>
					main_state = ST_RESET;
 80004c6:	4b32      	ldr	r3, [pc, #200]	; (8000590 <main+0x22c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
				break;
 80004cc:	e05f      	b.n	800058e <main+0x22a>

			case ST_M1:
				switch (c) {
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b0a      	cmp	r3, #10
 80004d4:	d108      	bne.n	80004e8 <main+0x184>
				case '\n':
					SPI1_Init_Clk(SPI_POLARITY_LOW, SPI_PHASE_2EDGE);
 80004d6:	2101      	movs	r1, #1
 80004d8:	2000      	movs	r0, #0
 80004da:	f7ff ff01 	bl	80002e0 <SPI1_Init_Clk>
					main_state = ST_RESET;
 80004de:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <main+0x22c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
					break;
 80004e4:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 80004e6:	e052      	b.n	800058e <main+0x22a>
					main_state = ST_RESET;
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <main+0x22c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
				break;
 80004ee:	e04e      	b.n	800058e <main+0x22a>

			case ST_M2:
				switch (c) {
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b0a      	cmp	r3, #10
 80004f6:	d108      	bne.n	800050a <main+0x1a6>
				case '\n':
					SPI1_Init_Clk(SPI_POLARITY_HIGH, SPI_PHASE_1EDGE);
 80004f8:	2100      	movs	r1, #0
 80004fa:	2002      	movs	r0, #2
 80004fc:	f7ff fef0 	bl	80002e0 <SPI1_Init_Clk>
					main_state = ST_RESET;
 8000500:	4b23      	ldr	r3, [pc, #140]	; (8000590 <main+0x22c>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
					break;
 8000506:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 8000508:	e041      	b.n	800058e <main+0x22a>
					main_state = ST_RESET;
 800050a:	4b21      	ldr	r3, [pc, #132]	; (8000590 <main+0x22c>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
				break;
 8000510:	e03d      	b.n	800058e <main+0x22a>

			case ST_M3:
				switch (c) {
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b0a      	cmp	r3, #10
 8000518:	d108      	bne.n	800052c <main+0x1c8>
				case '\n':
					SPI1_Init_Clk(SPI_POLARITY_HIGH, SPI_PHASE_2EDGE);
 800051a:	2101      	movs	r1, #1
 800051c:	2002      	movs	r0, #2
 800051e:	f7ff fedf 	bl	80002e0 <SPI1_Init_Clk>
					main_state = ST_RESET;
 8000522:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <main+0x22c>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
					break;
 8000528:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 800052a:	e030      	b.n	800058e <main+0x22a>
					main_state = ST_RESET;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <main+0x22c>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
				break;
 8000532:	e02c      	b.n	800058e <main+0x22a>

			case ST_D1:
				sy1 = c;
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	1d3a      	adds	r2, r7, #4
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	701a      	strb	r2, [r3, #0]
				main_state = ST_D2;
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <main+0x22c>)
 800053e:	2202      	movs	r2, #2
 8000540:	701a      	strb	r2, [r3, #0]
				break;
 8000542:	e024      	b.n	800058e <main+0x22a>

			case ST_D2:
				sy2 = c;
 8000544:	1dbb      	adds	r3, r7, #6
 8000546:	1d3a      	adds	r2, r7, #4
 8000548:	7812      	ldrb	r2, [r2, #0]
 800054a:	701a      	strb	r2, [r3, #0]
				main_state = ST_Dn;
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <main+0x22c>)
 800054e:	220d      	movs	r2, #13
 8000550:	701a      	strb	r2, [r3, #0]
				break;
 8000552:	e01c      	b.n	800058e <main+0x22a>

			case ST_Dn:
				switch (c) {
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b0a      	cmp	r3, #10
 800055a:	d10f      	bne.n	800057c <main+0x218>
				case '\n':
					ress = hex2char(sy1,sy2);
 800055c:	1d7c      	adds	r4, r7, #5
 800055e:	1dbb      	adds	r3, r7, #6
 8000560:	781a      	ldrb	r2, [r3, #0]
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	0011      	movs	r1, r2
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff fe9b 	bl	80002a4 <hex2char>
 800056e:	0003      	movs	r3, r0
 8000570:	7023      	strb	r3, [r4, #0]
					main_state = ST_RESET;
 8000572:	4b07      	ldr	r3, [pc, #28]	; (8000590 <main+0x22c>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
					break;
 8000578:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 800057a:	e008      	b.n	800058e <main+0x22a>
					main_state = ST_RESET;
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <main+0x22c>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
				break;
 8000582:	e004      	b.n	800058e <main+0x22a>

			default:
				main_state = ST_RESET;
 8000584:	4b02      	ldr	r3, [pc, #8]	; (8000590 <main+0x22c>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	e6fb      	b.n	8000384 <main+0x20>

			}
		}
 800058c:	46c0      	nop			; (mov r8, r8)
		if (rx(&c)) {
 800058e:	e6f9      	b.n	8000384 <main+0x20>
 8000590:	2000002a 	.word	0x2000002a
 8000594:	08002400 	.word	0x08002400

08000598 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b097      	sub	sp, #92	; 0x5c
 800059c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800059e:	2428      	movs	r4, #40	; 0x28
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	0018      	movs	r0, r3
 80005a4:	2330      	movs	r3, #48	; 0x30
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f001 ff05 	bl	80023b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005ae:	2318      	movs	r3, #24
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	0018      	movs	r0, r3
 80005b4:	2310      	movs	r3, #16
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f001 fefd 	bl	80023b8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	0018      	movs	r0, r3
 80005c2:	2314      	movs	r3, #20
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f001 fef6 	bl	80023b8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	0021      	movs	r1, r4
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2202      	movs	r2, #2
 80005d2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2201      	movs	r2, #1
 80005d8:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2210      	movs	r2, #16
 80005de:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2202      	movs	r2, #2
 80005e4:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	22a0      	movs	r2, #160	; 0xa0
 80005f0:	0392      	lsls	r2, r2, #14
 80005f2:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fc85 	bl	8000f0c <HAL_RCC_OscConfig>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x72>
		Error_Handler();
 8000606:	f000 f8d1 	bl	80007ac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800060a:	2118      	movs	r1, #24
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2207      	movs	r2, #7
 8000610:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2202      	movs	r2, #2
 8000616:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2101      	movs	r1, #1
 8000628:	0018      	movs	r0, r3
 800062a:	f000 ff89 	bl	8001540 <HAL_RCC_ClockConfig>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x9e>
		Error_Handler();
 8000632:	f000 f8bb 	bl	80007ac <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2201      	movs	r2, #1
 800063a:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	0018      	movs	r0, r3
 8000646:	f001 f8cd 	bl	80017e4 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xba>
		Error_Handler();
 800064e:	f000 f8ad 	bl	80007ac <Error_Handler>
	}
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b017      	add	sp, #92	; 0x5c
 8000658:	bd90      	pop	{r4, r7, pc}
	...

0800065c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000662:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <MX_SPI1_Init+0x78>)
 8000664:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000668:	2282      	movs	r2, #130	; 0x82
 800066a:	0052      	lsls	r2, r2, #1
 800066c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000676:	22e0      	movs	r2, #224	; 0xe0
 8000678:	00d2      	lsls	r2, r2, #3
 800067a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_SPI1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_SPI1_Init+0x74>)
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	0092      	lsls	r2, r2, #2
 800068e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000692:	2238      	movs	r2, #56	; 0x38
 8000694:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_SPI1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_SPI1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_SPI1_Init+0x74>)
 80006aa:	2207      	movs	r2, #7
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_SPI1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_SPI1_Init+0x74>)
 80006b6:	2208      	movs	r2, #8
 80006b8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MX_SPI1_Init+0x74>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 f96f 	bl	80019a0 <HAL_SPI_Init>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_SPI1_Init+0x6e>
		Error_Handler();
 80006c6:	f000 f871 	bl	80007ac <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000b0 	.word	0x200000b0
 80006d4:	40013000 	.word	0x40013000

080006d8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_USART1_UART_Init+0x58>)
 80006de:	4a15      	ldr	r2, [pc, #84]	; (8000734 <MX_USART1_UART_Init+0x5c>)
 80006e0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_USART1_UART_Init+0x58>)
 80006e4:	22e1      	movs	r2, #225	; 0xe1
 80006e6:	0252      	lsls	r2, r2, #9
 80006e8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART1_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_USART1_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART1_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART1_UART_Init+0x58>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART1_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART1_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART1_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART1_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <MX_USART1_UART_Init+0x58>)
 800071c:	0018      	movs	r0, r3
 800071e:	f001 f9f7 	bl	8001b10 <HAL_UART_Init>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000726:	f000 f841 	bl	80007ac <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000002c 	.word	0x2000002c
 8000734:	40013800 	.word	0x40013800

08000738 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	0018      	movs	r0, r3
 8000742:	2314      	movs	r3, #20
 8000744:	001a      	movs	r2, r3
 8000746:	2100      	movs	r1, #0
 8000748:	f001 fe36 	bl	80023b8 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_GPIO_Init+0x70>)
 800074e:	695a      	ldr	r2, [r3, #20]
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_GPIO_Init+0x70>)
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	0289      	lsls	r1, r1, #10
 8000756:	430a      	orrs	r2, r1
 8000758:	615a      	str	r2, [r3, #20]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_GPIO_Init+0x70>)
 800075c:	695a      	ldr	r2, [r3, #20]
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	029b      	lsls	r3, r3, #10
 8000762:	4013      	ands	r3, r2
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin | GPIO_PIN_11, GPIO_PIN_RESET);
 8000768:	2381      	movs	r3, #129	; 0x81
 800076a:	0119      	lsls	r1, r3, #4
 800076c:	2390      	movs	r3, #144	; 0x90
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	2200      	movs	r2, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f000 fbac 	bl	8000ed0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SPI1_NSS_Pin PA11 */
	GPIO_InitStruct.Pin = SPI1_NSS_Pin | GPIO_PIN_11;
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2281      	movs	r2, #129	; 0x81
 800077c:	0112      	lsls	r2, r2, #4
 800077e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2201      	movs	r2, #1
 8000784:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	1d3a      	adds	r2, r7, #4
 8000794:	2390      	movs	r3, #144	; 0x90
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f000 fa28 	bl	8000bf0 <HAL_GPIO_Init>

}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b006      	add	sp, #24
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x44>)
 80007c0:	699a      	ldr	r2, [r3, #24]
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <HAL_MspInit+0x44>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	619a      	str	r2, [r3, #24]
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_MspInit+0x44>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	2201      	movs	r2, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x44>)
 80007d8:	69da      	ldr	r2, [r3, #28]
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_MspInit+0x44>)
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	0549      	lsls	r1, r1, #21
 80007e0:	430a      	orrs	r2, r1
 80007e2:	61da      	str	r2, [r3, #28]
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_MspInit+0x44>)
 80007e6:	69da      	ldr	r2, [r3, #28]
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	055b      	lsls	r3, r3, #21
 80007ec:	4013      	ands	r3, r2
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b002      	add	sp, #8
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b08b      	sub	sp, #44	; 0x2c
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	2414      	movs	r4, #20
 800080a:	193b      	adds	r3, r7, r4
 800080c:	0018      	movs	r0, r3
 800080e:	2314      	movs	r3, #20
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f001 fdd0 	bl	80023b8 <memset>
  if(hspi->Instance==SPI1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <HAL_SPI_MspInit+0x90>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d132      	bne.n	8000888 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <HAL_SPI_MspInit+0x94>)
 8000824:	699a      	ldr	r2, [r3, #24]
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <HAL_SPI_MspInit+0x94>)
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	0149      	lsls	r1, r1, #5
 800082c:	430a      	orrs	r2, r1
 800082e:	619a      	str	r2, [r3, #24]
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <HAL_SPI_MspInit+0x94>)
 8000832:	699a      	ldr	r2, [r3, #24]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	015b      	lsls	r3, r3, #5
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_SPI_MspInit+0x94>)
 8000840:	695a      	ldr	r2, [r3, #20]
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_SPI_MspInit+0x94>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0289      	lsls	r1, r1, #10
 8000848:	430a      	orrs	r2, r1
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_SPI_MspInit+0x94>)
 800084e:	695a      	ldr	r2, [r3, #20]
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	029b      	lsls	r3, r3, #10
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800085a:	0021      	movs	r1, r4
 800085c:	187b      	adds	r3, r7, r1
 800085e:	22e0      	movs	r2, #224	; 0xe0
 8000860:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2202      	movs	r2, #2
 8000866:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2203      	movs	r2, #3
 8000872:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	187a      	adds	r2, r7, r1
 800087c:	2390      	movs	r3, #144	; 0x90
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f000 f9b4 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b00b      	add	sp, #44	; 0x2c
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	40013000 	.word	0x40013000
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b08b      	sub	sp, #44	; 0x2c
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	2414      	movs	r4, #20
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	0018      	movs	r0, r3
 80008a6:	2314      	movs	r3, #20
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f001 fd84 	bl	80023b8 <memset>
  if(huart->Instance==USART1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a1d      	ldr	r2, [pc, #116]	; (800092c <HAL_UART_MspInit+0x94>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d133      	bne.n	8000922 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <HAL_UART_MspInit+0x98>)
 80008bc:	699a      	ldr	r2, [r3, #24]
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_UART_MspInit+0x98>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	01c9      	lsls	r1, r1, #7
 80008c4:	430a      	orrs	r2, r1
 80008c6:	619a      	str	r2, [r3, #24]
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <HAL_UART_MspInit+0x98>)
 80008ca:	699a      	ldr	r2, [r3, #24]
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	01db      	lsls	r3, r3, #7
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <HAL_UART_MspInit+0x98>)
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_UART_MspInit+0x98>)
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	0289      	lsls	r1, r1, #10
 80008e0:	430a      	orrs	r2, r1
 80008e2:	615a      	str	r2, [r3, #20]
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_UART_MspInit+0x98>)
 80008e6:	695a      	ldr	r2, [r3, #20]
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	029b      	lsls	r3, r3, #10
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	22c0      	movs	r2, #192	; 0xc0
 80008f6:	00d2      	lsls	r2, r2, #3
 80008f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	0021      	movs	r1, r4
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2202      	movs	r2, #2
 8000900:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2203      	movs	r2, #3
 800090c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2201      	movs	r2, #1
 8000912:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	187a      	adds	r2, r7, r1
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f000 f967 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b00b      	add	sp, #44	; 0x2c
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40013800 	.word	0x40013800
 8000930:	40021000 	.word	0x40021000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000958:	f000 f87a 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <Reset_Handler>:
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <LoopForever+0x2>)
 800096e:	4685      	mov	sp, r0
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <LoopForever+0x6>)
 8000972:	490e      	ldr	r1, [pc, #56]	; (80009ac <LoopForever+0xa>)
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <LoopForever+0xe>)
 8000976:	2300      	movs	r3, #0
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:
 800097a:	58d4      	ldr	r4, [r2, r3]
 800097c:	50c4      	str	r4, [r0, r3]
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:
 8000980:	18c4      	adds	r4, r0, r3
 8000982:	428c      	cmp	r4, r1
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <LoopForever+0x12>)
 8000988:	4c0b      	ldr	r4, [pc, #44]	; (80009b8 <LoopForever+0x16>)
 800098a:	2300      	movs	r3, #0
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:
 8000992:	42a2      	cmp	r2, r4
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>
 8000996:	f7ff ffe4 	bl	8000962 <SystemInit>
 800099a:	f001 fce9 	bl	8002370 <__libc_init_array>
 800099e:	f7ff fce1 	bl	8000364 <main>

080009a2 <LoopForever>:
 80009a2:	e7fe      	b.n	80009a2 <LoopForever>
 80009a4:	20002000 	.word	0x20002000
 80009a8:	20000000 	.word	0x20000000
 80009ac:	2000000c 	.word	0x2000000c
 80009b0:	08002458 	.word	0x08002458
 80009b4:	2000000c 	.word	0x2000000c
 80009b8:	20000118 	.word	0x20000118

080009bc <ADC1_COMP_IRQHandler>:
 80009bc:	e7fe      	b.n	80009bc <ADC1_COMP_IRQHandler>
	...

080009c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <HAL_Init+0x24>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_Init+0x24>)
 80009ca:	2110      	movs	r1, #16
 80009cc:	430a      	orrs	r2, r1
 80009ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 f809 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d6:	f7ff feef 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_InitTick+0x5c>)
 80009f2:	681c      	ldr	r4, [r3, #0]
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_InitTick+0x60>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	0019      	movs	r1, r3
 80009fa:	23fa      	movs	r3, #250	; 0xfa
 80009fc:	0098      	lsls	r0, r3, #2
 80009fe:	f7ff fb83 	bl	8000108 <__udivsi3>
 8000a02:	0003      	movs	r3, r0
 8000a04:	0019      	movs	r1, r3
 8000a06:	0020      	movs	r0, r4
 8000a08:	f7ff fb7e 	bl	8000108 <__udivsi3>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 f8e1 	bl	8000bd6 <HAL_SYSTICK_Config>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e00f      	b.n	8000a3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d80b      	bhi.n	8000a3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2301      	movs	r3, #1
 8000a26:	425b      	negs	r3, r3
 8000a28:	2200      	movs	r2, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 f8be 	bl	8000bac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_InitTick+0x64>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b003      	add	sp, #12
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000004 	.word	0x20000004

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	001a      	movs	r2, r3
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x20>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	18d2      	adds	r2, r2, r3
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_IncTick+0x20>)
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000114 	.word	0x20000114

08000a74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <HAL_GetTick+0x10>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	20000114 	.word	0x20000114

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a9c:	d828      	bhi.n	8000af0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9e:	4a2f      	ldr	r2, [pc, #188]	; (8000b5c <__NVIC_SetPriority+0xd4>)
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	33c0      	adds	r3, #192	; 0xc0
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	589b      	ldr	r3, [r3, r2]
 8000aae:	1dfa      	adds	r2, r7, #7
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	00d2      	lsls	r2, r2, #3
 8000aba:	21ff      	movs	r1, #255	; 0xff
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	43d2      	mvns	r2, r2
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	22ff      	movs	r2, #255	; 0xff
 8000acc:	401a      	ands	r2, r3
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	4003      	ands	r3, r0
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000adc:	481f      	ldr	r0, [pc, #124]	; (8000b5c <__NVIC_SetPriority+0xd4>)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	33c0      	adds	r3, #192	; 0xc0
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aee:	e031      	b.n	8000b54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <__NVIC_SetPriority+0xd8>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	0019      	movs	r1, r3
 8000af8:	230f      	movs	r3, #15
 8000afa:	400b      	ands	r3, r1
 8000afc:	3b08      	subs	r3, #8
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	3306      	adds	r3, #6
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	3304      	adds	r3, #4
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1dfa      	adds	r2, r7, #7
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	0011      	movs	r1, r2
 8000b10:	2203      	movs	r2, #3
 8000b12:	400a      	ands	r2, r1
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	21ff      	movs	r1, #255	; 0xff
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	43d2      	mvns	r2, r2
 8000b1e:	401a      	ands	r2, r3
 8000b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	019b      	lsls	r3, r3, #6
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	401a      	ands	r2, r3
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2303      	movs	r3, #3
 8000b32:	4003      	ands	r3, r0
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <__NVIC_SetPriority+0xd8>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	001c      	movs	r4, r3
 8000b40:	230f      	movs	r3, #15
 8000b42:	4023      	ands	r3, r4
 8000b44:	3b08      	subs	r3, #8
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	3306      	adds	r3, #6
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	18c3      	adds	r3, r0, r3
 8000b50:	3304      	adds	r3, #4
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b003      	add	sp, #12
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	045b      	lsls	r3, r3, #17
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d301      	bcc.n	8000b7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e010      	b.n	8000b9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <SysTick_Config+0x44>)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	3a01      	subs	r2, #1
 8000b82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b84:	2301      	movs	r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	2103      	movs	r1, #3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff ff7c 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x44>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x44>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	1c02      	adds	r2, r0, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ff5d 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ffbf 	bl	8000b64 <SysTick_Config>
 8000be6:	0003      	movs	r3, r0
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfe:	e14f      	b.n	8000ea0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	000a      	movs	r2, r1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d100      	bne.n	8000c18 <HAL_GPIO_Init+0x28>
 8000c16:	e140      	b.n	8000e9a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	4013      	ands	r3, r2
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d005      	beq.n	8000c30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2203      	movs	r2, #3
 8000c2a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d130      	bne.n	8000c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	409a      	lsls	r2, r3
 8000c3e:	0013      	movs	r3, r2
 8000c40:	43da      	mvns	r2, r3
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	409a      	lsls	r2, r3
 8000c52:	0013      	movs	r3, r2
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c66:	2201      	movs	r2, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	091b      	lsrs	r3, r3, #4
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2203      	movs	r2, #3
 8000c98:	4013      	ands	r3, r2
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d017      	beq.n	8000cce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d123      	bne.n	8000d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	58d3      	ldr	r3, [r2, r3]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	2207      	movs	r2, #7
 8000cec:	4013      	ands	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2107      	movs	r1, #7
 8000d06:	400b      	ands	r3, r1
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	6939      	ldr	r1, [r7, #16]
 8000d20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	43da      	mvns	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2203      	movs	r2, #3
 8000d40:	401a      	ands	r2, r3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	23c0      	movs	r3, #192	; 0xc0
 8000d5c:	029b      	lsls	r3, r3, #10
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d100      	bne.n	8000d64 <HAL_GPIO_Init+0x174>
 8000d62:	e09a      	b.n	8000e9a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d64:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000d66:	699a      	ldr	r2, [r3, #24]
 8000d68:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	619a      	str	r2, [r3, #24]
 8000d70:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	2201      	movs	r2, #1
 8000d76:	4013      	ands	r3, r2
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d7c:	4a4f      	ldr	r2, [pc, #316]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	589b      	ldr	r3, [r3, r2]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4013      	ands	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	220f      	movs	r2, #15
 8000d94:	409a      	lsls	r2, r3
 8000d96:	0013      	movs	r3, r2
 8000d98:	43da      	mvns	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	2390      	movs	r3, #144	; 0x90
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x1e2>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a44      	ldr	r2, [pc, #272]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x1de>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a43      	ldr	r2, [pc, #268]	; (8000ec4 <HAL_GPIO_Init+0x2d4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x1da>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a42      	ldr	r2, [pc, #264]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x1d6>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	400a      	ands	r2, r1
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000de4:	4935      	ldr	r1, [pc, #212]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	025b      	lsls	r3, r3, #9
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43da      	mvns	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	029b      	lsls	r3, r3, #10
 8000e34:	4013      	ands	r3, r2
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	035b      	lsls	r3, r3, #13
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43da      	mvns	r2, r3
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	039b      	lsls	r3, r3, #14
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	40da      	lsrs	r2, r3
 8000ea8:	1e13      	subs	r3, r2, #0
 8000eaa:	d000      	beq.n	8000eae <HAL_GPIO_Init+0x2be>
 8000eac:	e6a8      	b.n	8000c00 <HAL_GPIO_Init+0x10>
  } 
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b006      	add	sp, #24
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	48000c00 	.word	0x48000c00
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	0008      	movs	r0, r1
 8000eda:	0011      	movs	r1, r2
 8000edc:	1cbb      	adds	r3, r7, #2
 8000ede:	1c02      	adds	r2, r0, #0
 8000ee0:	801a      	strh	r2, [r3, #0]
 8000ee2:	1c7b      	adds	r3, r7, #1
 8000ee4:	1c0a      	adds	r2, r1, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee8:	1c7b      	adds	r3, r7, #1
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d004      	beq.n	8000efa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ef0:	1cbb      	adds	r3, r7, #2
 8000ef2:	881a      	ldrh	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ef8:	e003      	b.n	8000f02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000efa:	1cbb      	adds	r3, r7, #2
 8000efc:	881a      	ldrh	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e301      	b.n	8001522 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2201      	movs	r2, #1
 8000f24:	4013      	ands	r3, r2
 8000f26:	d100      	bne.n	8000f2a <HAL_RCC_OscConfig+0x1e>
 8000f28:	e08d      	b.n	8001046 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f2a:	4bc3      	ldr	r3, [pc, #780]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	220c      	movs	r2, #12
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d00e      	beq.n	8000f54 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f36:	4bc0      	ldr	r3, [pc, #768]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d116      	bne.n	8000f70 <HAL_RCC_OscConfig+0x64>
 8000f42:	4bbd      	ldr	r3, [pc, #756]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	025b      	lsls	r3, r3, #9
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	025b      	lsls	r3, r3, #9
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d10d      	bne.n	8000f70 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f54:	4bb8      	ldr	r3, [pc, #736]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	029b      	lsls	r3, r3, #10
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d100      	bne.n	8000f62 <HAL_RCC_OscConfig+0x56>
 8000f60:	e070      	b.n	8001044 <HAL_RCC_OscConfig+0x138>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d000      	beq.n	8000f6c <HAL_RCC_OscConfig+0x60>
 8000f6a:	e06b      	b.n	8001044 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e2d8      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d107      	bne.n	8000f88 <HAL_RCC_OscConfig+0x7c>
 8000f78:	4baf      	ldr	r3, [pc, #700]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4bae      	ldr	r3, [pc, #696]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	0249      	lsls	r1, r1, #9
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e02f      	b.n	8000fe8 <HAL_RCC_OscConfig+0xdc>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10c      	bne.n	8000faa <HAL_RCC_OscConfig+0x9e>
 8000f90:	4ba9      	ldr	r3, [pc, #676]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4ba8      	ldr	r3, [pc, #672]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000f96:	49a9      	ldr	r1, [pc, #676]	; (800123c <HAL_RCC_OscConfig+0x330>)
 8000f98:	400a      	ands	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	4ba6      	ldr	r3, [pc, #664]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4ba5      	ldr	r3, [pc, #660]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000fa2:	49a7      	ldr	r1, [pc, #668]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	e01e      	b.n	8000fe8 <HAL_RCC_OscConfig+0xdc>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d10e      	bne.n	8000fd0 <HAL_RCC_OscConfig+0xc4>
 8000fb2:	4ba1      	ldr	r3, [pc, #644]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4ba0      	ldr	r3, [pc, #640]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	02c9      	lsls	r1, r1, #11
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	4b9d      	ldr	r3, [pc, #628]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b9c      	ldr	r3, [pc, #624]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	0249      	lsls	r1, r1, #9
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e00b      	b.n	8000fe8 <HAL_RCC_OscConfig+0xdc>
 8000fd0:	4b99      	ldr	r3, [pc, #612]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b98      	ldr	r3, [pc, #608]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	4999      	ldr	r1, [pc, #612]	; (800123c <HAL_RCC_OscConfig+0x330>)
 8000fd8:	400a      	ands	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	4b96      	ldr	r3, [pc, #600]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b95      	ldr	r3, [pc, #596]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	4997      	ldr	r1, [pc, #604]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fe4:	400a      	ands	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d014      	beq.n	800101a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fd40 	bl	8000a74 <HAL_GetTick>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffa:	f7ff fd3b 	bl	8000a74 <HAL_GetTick>
 8000ffe:	0002      	movs	r2, r0
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b64      	cmp	r3, #100	; 0x64
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e28a      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100c:	4b8a      	ldr	r3, [pc, #552]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	029b      	lsls	r3, r3, #10
 8001014:	4013      	ands	r3, r2
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0xee>
 8001018:	e015      	b.n	8001046 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fd2b 	bl	8000a74 <HAL_GetTick>
 800101e:	0003      	movs	r3, r0
 8001020:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fd26 	bl	8000a74 <HAL_GetTick>
 8001028:	0002      	movs	r2, r0
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e275      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	4b80      	ldr	r3, [pc, #512]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	4013      	ands	r3, r2
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x118>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2202      	movs	r2, #2
 800104c:	4013      	ands	r3, r2
 800104e:	d100      	bne.n	8001052 <HAL_RCC_OscConfig+0x146>
 8001050:	e069      	b.n	8001126 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001052:	4b79      	ldr	r3, [pc, #484]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	220c      	movs	r2, #12
 8001058:	4013      	ands	r3, r2
 800105a:	d00b      	beq.n	8001074 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800105c:	4b76      	ldr	r3, [pc, #472]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	220c      	movs	r2, #12
 8001062:	4013      	ands	r3, r2
 8001064:	2b08      	cmp	r3, #8
 8001066:	d11c      	bne.n	80010a2 <HAL_RCC_OscConfig+0x196>
 8001068:	4b73      	ldr	r3, [pc, #460]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	4013      	ands	r3, r2
 8001072:	d116      	bne.n	80010a2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001074:	4b70      	ldr	r3, [pc, #448]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2202      	movs	r2, #2
 800107a:	4013      	ands	r3, r2
 800107c:	d005      	beq.n	800108a <HAL_RCC_OscConfig+0x17e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e24b      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b6b      	ldr	r3, [pc, #428]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	22f8      	movs	r2, #248	; 0xf8
 8001090:	4393      	bics	r3, r2
 8001092:	0019      	movs	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	00da      	lsls	r2, r3, #3
 800109a:	4b67      	ldr	r3, [pc, #412]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a0:	e041      	b.n	8001126 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d024      	beq.n	80010f4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010aa:	4b63      	ldr	r3, [pc, #396]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b62      	ldr	r3, [pc, #392]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 80010b0:	2101      	movs	r1, #1
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fcdd 	bl	8000a74 <HAL_GetTick>
 80010ba:	0003      	movs	r3, r0
 80010bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c0:	f7ff fcd8 	bl	8000a74 <HAL_GetTick>
 80010c4:	0002      	movs	r2, r0
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e227      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d2:	4b59      	ldr	r3, [pc, #356]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2202      	movs	r2, #2
 80010d8:	4013      	ands	r3, r2
 80010da:	d0f1      	beq.n	80010c0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010dc:	4b56      	ldr	r3, [pc, #344]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	22f8      	movs	r2, #248	; 0xf8
 80010e2:	4393      	bics	r3, r2
 80010e4:	0019      	movs	r1, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	00da      	lsls	r2, r3, #3
 80010ec:	4b52      	ldr	r3, [pc, #328]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e018      	b.n	8001126 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f4:	4b50      	ldr	r3, [pc, #320]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b4f      	ldr	r3, [pc, #316]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	438a      	bics	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fcb8 	bl	8000a74 <HAL_GetTick>
 8001104:	0003      	movs	r3, r0
 8001106:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110a:	f7ff fcb3 	bl	8000a74 <HAL_GetTick>
 800110e:	0002      	movs	r2, r0
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e202      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111c:	4b46      	ldr	r3, [pc, #280]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2202      	movs	r2, #2
 8001122:	4013      	ands	r3, r2
 8001124:	d1f1      	bne.n	800110a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2208      	movs	r2, #8
 800112c:	4013      	ands	r3, r2
 800112e:	d036      	beq.n	800119e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d019      	beq.n	800116c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001138:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 800113a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800113c:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 800113e:	2101      	movs	r1, #1
 8001140:	430a      	orrs	r2, r1
 8001142:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001144:	f7ff fc96 	bl	8000a74 <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800114e:	f7ff fc91 	bl	8000a74 <HAL_GetTick>
 8001152:	0002      	movs	r2, r0
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e1e0      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	2202      	movs	r2, #2
 8001166:	4013      	ands	r3, r2
 8001168:	d0f1      	beq.n	800114e <HAL_RCC_OscConfig+0x242>
 800116a:	e018      	b.n	800119e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 800116e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001170:	4b31      	ldr	r3, [pc, #196]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8001172:	2101      	movs	r1, #1
 8001174:	438a      	bics	r2, r1
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001178:	f7ff fc7c 	bl	8000a74 <HAL_GetTick>
 800117c:	0003      	movs	r3, r0
 800117e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001182:	f7ff fc77 	bl	8000a74 <HAL_GetTick>
 8001186:	0002      	movs	r2, r0
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e1c6      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001194:	4b28      	ldr	r3, [pc, #160]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	2202      	movs	r2, #2
 800119a:	4013      	ands	r3, r2
 800119c:	d1f1      	bne.n	8001182 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2204      	movs	r2, #4
 80011a4:	4013      	ands	r3, r2
 80011a6:	d100      	bne.n	80011aa <HAL_RCC_OscConfig+0x29e>
 80011a8:	e0b4      	b.n	8001314 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011aa:	201f      	movs	r0, #31
 80011ac:	183b      	adds	r3, r7, r0
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 80011b4:	69da      	ldr	r2, [r3, #28]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	055b      	lsls	r3, r3, #21
 80011ba:	4013      	ands	r3, r2
 80011bc:	d110      	bne.n	80011e0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 80011c0:	69da      	ldr	r2, [r3, #28]
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	0549      	lsls	r1, r1, #21
 80011c8:	430a      	orrs	r2, r1
 80011ca:	61da      	str	r2, [r3, #28]
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 80011ce:	69da      	ldr	r2, [r3, #28]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	055b      	lsls	r3, r3, #21
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011da:	183b      	adds	r3, r7, r0
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_RCC_OscConfig+0x338>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4013      	ands	r3, r2
 80011ea:	d11a      	bne.n	8001222 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_RCC_OscConfig+0x338>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_RCC_OscConfig+0x338>)
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	0049      	lsls	r1, r1, #1
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fc3b 	bl	8000a74 <HAL_GetTick>
 80011fe:	0003      	movs	r3, r0
 8001200:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001204:	f7ff fc36 	bl	8000a74 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b64      	cmp	r3, #100	; 0x64
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e185      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCC_OscConfig+0x338>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4013      	ands	r3, r2
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d10e      	bne.n	8001248 <HAL_RCC_OscConfig+0x33c>
 800122a:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 800122c:	6a1a      	ldr	r2, [r3, #32]
 800122e:	4b02      	ldr	r3, [pc, #8]	; (8001238 <HAL_RCC_OscConfig+0x32c>)
 8001230:	2101      	movs	r1, #1
 8001232:	430a      	orrs	r2, r1
 8001234:	621a      	str	r2, [r3, #32]
 8001236:	e035      	b.n	80012a4 <HAL_RCC_OscConfig+0x398>
 8001238:	40021000 	.word	0x40021000
 800123c:	fffeffff 	.word	0xfffeffff
 8001240:	fffbffff 	.word	0xfffbffff
 8001244:	40007000 	.word	0x40007000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10c      	bne.n	800126a <HAL_RCC_OscConfig+0x35e>
 8001250:	4bb6      	ldr	r3, [pc, #728]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	4bb5      	ldr	r3, [pc, #724]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001256:	2101      	movs	r1, #1
 8001258:	438a      	bics	r2, r1
 800125a:	621a      	str	r2, [r3, #32]
 800125c:	4bb3      	ldr	r3, [pc, #716]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	4bb2      	ldr	r3, [pc, #712]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001262:	2104      	movs	r1, #4
 8001264:	438a      	bics	r2, r1
 8001266:	621a      	str	r2, [r3, #32]
 8001268:	e01c      	b.n	80012a4 <HAL_RCC_OscConfig+0x398>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b05      	cmp	r3, #5
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x380>
 8001272:	4bae      	ldr	r3, [pc, #696]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001274:	6a1a      	ldr	r2, [r3, #32]
 8001276:	4bad      	ldr	r3, [pc, #692]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001278:	2104      	movs	r1, #4
 800127a:	430a      	orrs	r2, r1
 800127c:	621a      	str	r2, [r3, #32]
 800127e:	4bab      	ldr	r3, [pc, #684]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001280:	6a1a      	ldr	r2, [r3, #32]
 8001282:	4baa      	ldr	r3, [pc, #680]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001284:	2101      	movs	r1, #1
 8001286:	430a      	orrs	r2, r1
 8001288:	621a      	str	r2, [r3, #32]
 800128a:	e00b      	b.n	80012a4 <HAL_RCC_OscConfig+0x398>
 800128c:	4ba7      	ldr	r3, [pc, #668]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800128e:	6a1a      	ldr	r2, [r3, #32]
 8001290:	4ba6      	ldr	r3, [pc, #664]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001292:	2101      	movs	r1, #1
 8001294:	438a      	bics	r2, r1
 8001296:	621a      	str	r2, [r3, #32]
 8001298:	4ba4      	ldr	r3, [pc, #656]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800129a:	6a1a      	ldr	r2, [r3, #32]
 800129c:	4ba3      	ldr	r3, [pc, #652]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800129e:	2104      	movs	r1, #4
 80012a0:	438a      	bics	r2, r1
 80012a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d014      	beq.n	80012d6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ac:	f7ff fbe2 	bl	8000a74 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b4:	e009      	b.n	80012ca <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b6:	f7ff fbdd 	bl	8000a74 <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	4a9b      	ldr	r2, [pc, #620]	; (8001530 <HAL_RCC_OscConfig+0x624>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e12b      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ca:	4b98      	ldr	r3, [pc, #608]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	2202      	movs	r2, #2
 80012d0:	4013      	ands	r3, r2
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x3aa>
 80012d4:	e013      	b.n	80012fe <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fbcd 	bl	8000a74 <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012de:	e009      	b.n	80012f4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e0:	f7ff fbc8 	bl	8000a74 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	4a91      	ldr	r2, [pc, #580]	; (8001530 <HAL_RCC_OscConfig+0x624>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e116      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f4:	4b8d      	ldr	r3, [pc, #564]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	2202      	movs	r2, #2
 80012fa:	4013      	ands	r3, r2
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012fe:	231f      	movs	r3, #31
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d105      	bne.n	8001314 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001308:	4b88      	ldr	r3, [pc, #544]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800130a:	69da      	ldr	r2, [r3, #28]
 800130c:	4b87      	ldr	r3, [pc, #540]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800130e:	4989      	ldr	r1, [pc, #548]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001310:	400a      	ands	r2, r1
 8001312:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2210      	movs	r2, #16
 800131a:	4013      	ands	r3, r2
 800131c:	d063      	beq.n	80013e6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d12a      	bne.n	800137c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001326:	4b81      	ldr	r3, [pc, #516]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800132a:	4b80      	ldr	r3, [pc, #512]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800132c:	2104      	movs	r1, #4
 800132e:	430a      	orrs	r2, r1
 8001330:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001332:	4b7e      	ldr	r3, [pc, #504]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001336:	4b7d      	ldr	r3, [pc, #500]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001338:	2101      	movs	r1, #1
 800133a:	430a      	orrs	r2, r1
 800133c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fb99 	bl	8000a74 <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001348:	f7ff fb94 	bl	8000a74 <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e0e3      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800135a:	4b74      	ldr	r3, [pc, #464]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800135c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135e:	2202      	movs	r2, #2
 8001360:	4013      	ands	r3, r2
 8001362:	d0f1      	beq.n	8001348 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001364:	4b71      	ldr	r3, [pc, #452]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	22f8      	movs	r2, #248	; 0xf8
 800136a:	4393      	bics	r3, r2
 800136c:	0019      	movs	r1, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	00da      	lsls	r2, r3, #3
 8001374:	4b6d      	ldr	r3, [pc, #436]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001376:	430a      	orrs	r2, r1
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
 800137a:	e034      	b.n	80013e6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	3305      	adds	r3, #5
 8001382:	d111      	bne.n	80013a8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001384:	4b69      	ldr	r3, [pc, #420]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001388:	4b68      	ldr	r3, [pc, #416]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800138a:	2104      	movs	r1, #4
 800138c:	438a      	bics	r2, r1
 800138e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001390:	4b66      	ldr	r3, [pc, #408]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001394:	22f8      	movs	r2, #248	; 0xf8
 8001396:	4393      	bics	r3, r2
 8001398:	0019      	movs	r1, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	00da      	lsls	r2, r3, #3
 80013a0:	4b62      	ldr	r3, [pc, #392]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80013a2:	430a      	orrs	r2, r1
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34
 80013a6:	e01e      	b.n	80013e6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013a8:	4b60      	ldr	r3, [pc, #384]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80013aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ac:	4b5f      	ldr	r3, [pc, #380]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80013ae:	2104      	movs	r1, #4
 80013b0:	430a      	orrs	r2, r1
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013b4:	4b5d      	ldr	r3, [pc, #372]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80013b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b8:	4b5c      	ldr	r3, [pc, #368]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80013ba:	2101      	movs	r1, #1
 80013bc:	438a      	bics	r2, r1
 80013be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fb58 	bl	8000a74 <HAL_GetTick>
 80013c4:	0003      	movs	r3, r0
 80013c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013ca:	f7ff fb53 	bl	8000a74 <HAL_GetTick>
 80013ce:	0002      	movs	r2, r0
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e0a2      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80013de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e0:	2202      	movs	r2, #2
 80013e2:	4013      	ands	r3, r2
 80013e4:	d1f1      	bne.n	80013ca <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d100      	bne.n	80013f0 <HAL_RCC_OscConfig+0x4e4>
 80013ee:	e097      	b.n	8001520 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f0:	4b4e      	ldr	r3, [pc, #312]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	220c      	movs	r2, #12
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d100      	bne.n	80013fe <HAL_RCC_OscConfig+0x4f2>
 80013fc:	e06b      	b.n	80014d6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d14c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001406:	4b49      	ldr	r3, [pc, #292]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b48      	ldr	r3, [pc, #288]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800140c:	494a      	ldr	r1, [pc, #296]	; (8001538 <HAL_RCC_OscConfig+0x62c>)
 800140e:	400a      	ands	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001412:	f7ff fb2f 	bl	8000a74 <HAL_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff fb2a 	bl	8000a74 <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e079      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142e:	4b3f      	ldr	r3, [pc, #252]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	049b      	lsls	r3, r3, #18
 8001436:	4013      	ands	r3, r2
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143a:	4b3c      	ldr	r3, [pc, #240]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	220f      	movs	r2, #15
 8001440:	4393      	bics	r3, r2
 8001442:	0019      	movs	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001448:	4b38      	ldr	r3, [pc, #224]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800144a:	430a      	orrs	r2, r1
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4a3a      	ldr	r2, [pc, #232]	; (800153c <HAL_RCC_OscConfig+0x630>)
 8001454:	4013      	ands	r3, r2
 8001456:	0019      	movs	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	431a      	orrs	r2, r3
 8001462:	4b32      	ldr	r3, [pc, #200]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001464:	430a      	orrs	r2, r1
 8001466:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001468:	4b30      	ldr	r3, [pc, #192]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b2f      	ldr	r3, [pc, #188]	; (800152c <HAL_RCC_OscConfig+0x620>)
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	0449      	lsls	r1, r1, #17
 8001472:	430a      	orrs	r2, r1
 8001474:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fafd 	bl	8000a74 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff faf8 	bl	8000a74 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e047      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <HAL_RCC_OscConfig+0x620>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	049b      	lsls	r3, r3, #18
 800149a:	4013      	ands	r3, r2
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x574>
 800149e:	e03f      	b.n	8001520 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80014a6:	4924      	ldr	r1, [pc, #144]	; (8001538 <HAL_RCC_OscConfig+0x62c>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fae2 	bl	8000a74 <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff fadd 	bl	8000a74 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e02c      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	049b      	lsls	r3, r3, #18
 80014d0:	4013      	ands	r3, r2
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x5aa>
 80014d4:	e024      	b.n	8001520 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e01f      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_RCC_OscConfig+0x620>)
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	025b      	lsls	r3, r3, #9
 80014f4:	401a      	ands	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d10e      	bne.n	800151c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	220f      	movs	r2, #15
 8001502:	401a      	ands	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001508:	429a      	cmp	r2, r3
 800150a:	d107      	bne.n	800151c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	23f0      	movs	r3, #240	; 0xf0
 8001510:	039b      	lsls	r3, r3, #14
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	0018      	movs	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	b008      	add	sp, #32
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	40021000 	.word	0x40021000
 8001530:	00001388 	.word	0x00001388
 8001534:	efffffff 	.word	0xefffffff
 8001538:	feffffff 	.word	0xfeffffff
 800153c:	ffc2ffff 	.word	0xffc2ffff

08001540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0b3      	b.n	80016bc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001554:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <HAL_RCC_ClockConfig+0x184>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2201      	movs	r2, #1
 800155a:	4013      	ands	r3, r2
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d911      	bls.n	8001586 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_ClockConfig+0x184>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2201      	movs	r2, #1
 8001568:	4393      	bics	r3, r2
 800156a:	0019      	movs	r1, r3
 800156c:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HAL_RCC_ClockConfig+0x184>)
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001574:	4b53      	ldr	r3, [pc, #332]	; (80016c4 <HAL_RCC_ClockConfig+0x184>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2201      	movs	r2, #1
 800157a:	4013      	ands	r3, r2
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d001      	beq.n	8001586 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e09a      	b.n	80016bc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2202      	movs	r2, #2
 800158c:	4013      	ands	r3, r2
 800158e:	d015      	beq.n	80015bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2204      	movs	r2, #4
 8001596:	4013      	ands	r3, r2
 8001598:	d006      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800159a:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 80015a0:	21e0      	movs	r1, #224	; 0xe0
 80015a2:	00c9      	lsls	r1, r1, #3
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a8:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	22f0      	movs	r2, #240	; 0xf0
 80015ae:	4393      	bics	r3, r2
 80015b0:	0019      	movs	r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 80015b8:	430a      	orrs	r2, r1
 80015ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2201      	movs	r2, #1
 80015c2:	4013      	ands	r3, r2
 80015c4:	d040      	beq.n	8001648 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	029b      	lsls	r3, r3, #10
 80015d6:	4013      	ands	r3, r2
 80015d8:	d114      	bne.n	8001604 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e06e      	b.n	80016bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e6:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	049b      	lsls	r3, r3, #18
 80015ee:	4013      	ands	r3, r2
 80015f0:	d108      	bne.n	8001604 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e062      	b.n	80016bc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2202      	movs	r2, #2
 80015fc:	4013      	ands	r3, r2
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e05b      	b.n	80016bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2203      	movs	r2, #3
 800160a:	4393      	bics	r3, r2
 800160c:	0019      	movs	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001618:	f7ff fa2c 	bl	8000a74 <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001620:	e009      	b.n	8001636 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001622:	f7ff fa27 	bl	8000a74 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_RCC_ClockConfig+0x18c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e042      	b.n	80016bc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	220c      	movs	r2, #12
 800163c:	401a      	ands	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	429a      	cmp	r2, r3
 8001646:	d1ec      	bne.n	8001622 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_RCC_ClockConfig+0x184>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	4013      	ands	r3, r2
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d211      	bcs.n	800167a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_ClockConfig+0x184>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2201      	movs	r2, #1
 800165c:	4393      	bics	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_RCC_ClockConfig+0x184>)
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_RCC_ClockConfig+0x184>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2201      	movs	r2, #1
 800166e:	4013      	ands	r3, r2
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d001      	beq.n	800167a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e020      	b.n	80016bc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2204      	movs	r2, #4
 8001680:	4013      	ands	r3, r2
 8001682:	d009      	beq.n	8001698 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_RCC_ClockConfig+0x190>)
 800168a:	4013      	ands	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001698:	f000 f820 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 800169c:	0001      	movs	r1, r0
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_RCC_ClockConfig+0x188>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	220f      	movs	r2, #15
 80016a6:	4013      	ands	r3, r2
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_RCC_ClockConfig+0x194>)
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	000a      	movs	r2, r1
 80016ae:	40da      	lsrs	r2, r3
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x198>)
 80016b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff f997 	bl	80009e8 <HAL_InitTick>
  
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	0018      	movs	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	b004      	add	sp, #16
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40022000 	.word	0x40022000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	00001388 	.word	0x00001388
 80016d0:	fffff8ff 	.word	0xfffff8ff
 80016d4:	08002438 	.word	0x08002438
 80016d8:	20000000 	.word	0x20000000

080016dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b08f      	sub	sp, #60	; 0x3c
 80016e0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016e2:	2314      	movs	r3, #20
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	4a2b      	ldr	r2, [pc, #172]	; (8001794 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016ea:	c313      	stmia	r3!, {r0, r1, r4}
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4a29      	ldr	r2, [pc, #164]	; (8001798 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016f6:	c313      	stmia	r3!, {r0, r1, r4}
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
 8001704:	2300      	movs	r3, #0
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001710:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	220c      	movs	r2, #12
 800171a:	4013      	ands	r3, r2
 800171c:	2b04      	cmp	r3, #4
 800171e:	d002      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x4a>
 8001720:	2b08      	cmp	r3, #8
 8001722:	d003      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x50>
 8001724:	e02d      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800172a:	e02d      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	220f      	movs	r2, #15
 8001732:	4013      	ands	r3, r2
 8001734:	2214      	movs	r2, #20
 8001736:	18ba      	adds	r2, r7, r2
 8001738:	5cd3      	ldrb	r3, [r2, r3]
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_RCC_GetSysClockFreq+0xc0>)
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	220f      	movs	r2, #15
 8001742:	4013      	ands	r3, r2
 8001744:	1d3a      	adds	r2, r7, #4
 8001746:	5cd3      	ldrb	r3, [r2, r3]
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800174a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	025b      	lsls	r3, r3, #9
 8001750:	4013      	ands	r3, r2
 8001752:	d009      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001758:	f7fe fcd6 	bl	8000108 <__udivsi3>
 800175c:	0003      	movs	r3, r0
 800175e:	001a      	movs	r2, r3
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	4353      	muls	r3, r2
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
 8001766:	e009      	b.n	800177c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800176a:	000a      	movs	r2, r1
 800176c:	0152      	lsls	r2, r2, #5
 800176e:	1a52      	subs	r2, r2, r1
 8001770:	0193      	lsls	r3, r2, #6
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	185b      	adds	r3, r3, r1
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001780:	e002      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001786:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800178a:	0018      	movs	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	b00f      	add	sp, #60	; 0x3c
 8001790:	bd90      	pop	{r4, r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	080023e0 	.word	0x080023e0
 8001798:	080023f0 	.word	0x080023f0
 800179c:	40021000 	.word	0x40021000
 80017a0:	007a1200 	.word	0x007a1200

080017a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	0018      	movs	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	20000000 	.word	0x20000000

080017b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017bc:	f7ff fff2 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 80017c0:	0001      	movs	r1, r0
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	2207      	movs	r2, #7
 80017ca:	4013      	ands	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	40d9      	lsrs	r1, r3
 80017d2:	000b      	movs	r3, r1
}    
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	40021000 	.word	0x40021000
 80017e0:	08002448 	.word	0x08002448

080017e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	025b      	lsls	r3, r3, #9
 80017fc:	4013      	ands	r3, r2
 80017fe:	d100      	bne.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001800:	e08e      	b.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001802:	2017      	movs	r0, #23
 8001804:	183b      	adds	r3, r7, r0
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800180a:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	055b      	lsls	r3, r3, #21
 8001812:	4013      	ands	r3, r2
 8001814:	d110      	bne.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	4b5b      	ldr	r3, [pc, #364]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	0549      	lsls	r1, r1, #21
 8001820:	430a      	orrs	r2, r1
 8001822:	61da      	str	r2, [r3, #28]
 8001824:	4b58      	ldr	r3, [pc, #352]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001826:	69da      	ldr	r2, [r3, #28]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	055b      	lsls	r3, r3, #21
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001832:	183b      	adds	r3, r7, r0
 8001834:	2201      	movs	r2, #1
 8001836:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	4b54      	ldr	r3, [pc, #336]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4013      	ands	r3, r2
 8001842:	d11a      	bne.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001844:	4b51      	ldr	r3, [pc, #324]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b50      	ldr	r3, [pc, #320]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800184a:	2180      	movs	r1, #128	; 0x80
 800184c:	0049      	lsls	r1, r1, #1
 800184e:	430a      	orrs	r2, r1
 8001850:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001852:	f7ff f90f 	bl	8000a74 <HAL_GetTick>
 8001856:	0003      	movs	r3, r0
 8001858:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185a:	e008      	b.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185c:	f7ff f90a 	bl	8000a74 <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e087      	b.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186e:	4b47      	ldr	r3, [pc, #284]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4013      	ands	r3, r2
 8001878:	d0f0      	beq.n	800185c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800187a:	4b43      	ldr	r3, [pc, #268]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800187c:	6a1a      	ldr	r2, [r3, #32]
 800187e:	23c0      	movs	r3, #192	; 0xc0
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4013      	ands	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d034      	beq.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	23c0      	movs	r3, #192	; 0xc0
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4013      	ands	r3, r2
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d02c      	beq.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800189c:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a3b      	ldr	r2, [pc, #236]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018a6:	4b38      	ldr	r3, [pc, #224]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018a8:	6a1a      	ldr	r2, [r3, #32]
 80018aa:	4b37      	ldr	r3, [pc, #220]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	0249      	lsls	r1, r1, #9
 80018b0:	430a      	orrs	r2, r1
 80018b2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018b4:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018b6:	6a1a      	ldr	r2, [r3, #32]
 80018b8:	4b33      	ldr	r3, [pc, #204]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018ba:	4936      	ldr	r1, [pc, #216]	; (8001994 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80018bc:	400a      	ands	r2, r1
 80018be:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018c0:	4b31      	ldr	r3, [pc, #196]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff f8d1 	bl	8000a74 <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d6:	e009      	b.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d8:	f7ff f8cc 	bl	8000a74 <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	4a2d      	ldr	r2, [pc, #180]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e048      	b.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	2202      	movs	r2, #2
 80018f2:	4013      	ands	r3, r2
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a25      	ldr	r2, [pc, #148]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	4b20      	ldr	r3, [pc, #128]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001906:	430a      	orrs	r2, r1
 8001908:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800190a:	2317      	movs	r3, #23
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001914:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001916:	69da      	ldr	r2, [r3, #28]
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800191a:	4920      	ldr	r1, [pc, #128]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800191c:	400a      	ands	r2, r1
 800191e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2201      	movs	r2, #1
 8001926:	4013      	ands	r3, r2
 8001928:	d009      	beq.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	2203      	movs	r2, #3
 8001930:	4393      	bics	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800193a:	430a      	orrs	r2, r1
 800193c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2220      	movs	r2, #32
 8001944:	4013      	ands	r3, r2
 8001946:	d009      	beq.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	2210      	movs	r2, #16
 800194e:	4393      	bics	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001958:	430a      	orrs	r2, r1
 800195a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4013      	ands	r3, r2
 8001966:	d009      	beq.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	2240      	movs	r2, #64	; 0x40
 800196e:	4393      	bics	r3, r2
 8001970:	0019      	movs	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001978:	430a      	orrs	r2, r1
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b006      	add	sp, #24
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	40021000 	.word	0x40021000
 800198c:	40007000 	.word	0x40007000
 8001990:	fffffcff 	.word	0xfffffcff
 8001994:	fffeffff 	.word	0xfffeffff
 8001998:	00001388 	.word	0x00001388
 800199c:	efffffff 	.word	0xefffffff

080019a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0a8      	b.n	8001b04 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d109      	bne.n	80019ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	2382      	movs	r3, #130	; 0x82
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d009      	beq.n	80019da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	61da      	str	r2, [r3, #28]
 80019cc:	e005      	b.n	80019da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	225d      	movs	r2, #93	; 0x5d
 80019e4:	5c9b      	ldrb	r3, [r3, r2]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	225c      	movs	r2, #92	; 0x5c
 80019f0:	2100      	movs	r1, #0
 80019f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7fe ff02 	bl	8000800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	225d      	movs	r2, #93	; 0x5d
 8001a00:	2102      	movs	r1, #2
 8001a02:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2140      	movs	r1, #64	; 0x40
 8001a10:	438a      	bics	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	23e0      	movs	r3, #224	; 0xe0
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d902      	bls.n	8001a26 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e002      	b.n	8001a2c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	015b      	lsls	r3, r3, #5
 8001a2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	23f0      	movs	r3, #240	; 0xf0
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d008      	beq.n	8001a4a <HAL_SPI_Init+0xaa>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	23e0      	movs	r3, #224	; 0xe0
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d002      	beq.n	8001a4a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	2382      	movs	r3, #130	; 0x82
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	401a      	ands	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6899      	ldr	r1, [r3, #8]
 8001a58:	2384      	movs	r3, #132	; 0x84
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2102      	movs	r1, #2
 8001a66:	400b      	ands	r3, r1
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	2101      	movs	r1, #1
 8001a70:	400b      	ands	r3, r1
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6999      	ldr	r1, [r3, #24]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	2138      	movs	r1, #56	; 0x38
 8001a86:	400b      	ands	r3, r1
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	400b      	ands	r3, r1
 8001a92:	431a      	orrs	r2, r3
 8001a94:	0011      	movs	r1, r2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	019b      	lsls	r3, r3, #6
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	2204      	movs	r2, #4
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	400b      	ands	r3, r1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac0:	2108      	movs	r1, #8
 8001ac2:	400b      	ands	r3, r1
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68d9      	ldr	r1, [r3, #12]
 8001aca:	23f0      	movs	r3, #240	; 0xf0
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	400b      	ands	r3, r1
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	0011      	movs	r1, r2
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	015b      	lsls	r3, r3, #5
 8001ada:	401a      	ands	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4907      	ldr	r1, [pc, #28]	; (8001b0c <HAL_SPI_Init+0x16c>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	225d      	movs	r2, #93	; 0x5d
 8001afe:	2101      	movs	r1, #1
 8001b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b004      	add	sp, #16
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	fffff7ff 	.word	0xfffff7ff

08001b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e044      	b.n	8001bac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d107      	bne.n	8001b3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2274      	movs	r2, #116	; 0x74
 8001b2e:	2100      	movs	r1, #0
 8001b30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7fe feaf 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2224      	movs	r2, #36	; 0x24
 8001b3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 f90c 	bl	8001d70 <UART_SetConfig>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e024      	b.n	8001bac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f000 fa3f 	bl	8001ff0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	490d      	ldr	r1, [pc, #52]	; (8001bb4 <HAL_UART_Init+0xa4>)
 8001b7e:	400a      	ands	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	212a      	movs	r1, #42	; 0x2a
 8001b8e:	438a      	bics	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 fad7 	bl	8002158 <UART_CheckIdleState>
 8001baa:	0003      	movs	r3, r0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	ffffb7ff 	.word	0xffffb7ff

08001bb8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	1dbb      	adds	r3, r7, #6
 8001bc6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d000      	beq.n	8001bd2 <HAL_UART_Receive+0x1a>
 8001bd0:	e0c6      	b.n	8001d60 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_UART_Receive+0x28>
 8001bd8:	1dbb      	adds	r3, r7, #6
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0be      	b.n	8001d62 <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	015b      	lsls	r3, r3, #5
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d109      	bne.n	8001c04 <HAL_UART_Receive+0x4c>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d001      	beq.n	8001c04 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0ae      	b.n	8001d62 <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2274      	movs	r2, #116	; 0x74
 8001c08:	5c9b      	ldrb	r3, [r3, r2]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_UART_Receive+0x5a>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e0a7      	b.n	8001d62 <HAL_UART_Receive+0x1aa>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2274      	movs	r2, #116	; 0x74
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2280      	movs	r2, #128	; 0x80
 8001c1e:	2100      	movs	r1, #0
 8001c20:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2222      	movs	r2, #34	; 0x22
 8001c26:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c2e:	f7fe ff21 	bl	8000a74 <HAL_GetTick>
 8001c32:	0003      	movs	r3, r0
 8001c34:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1dba      	adds	r2, r7, #6
 8001c3a:	2158      	movs	r1, #88	; 0x58
 8001c3c:	8812      	ldrh	r2, [r2, #0]
 8001c3e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1dba      	adds	r2, r7, #6
 8001c44:	215a      	movs	r1, #90	; 0x5a
 8001c46:	8812      	ldrh	r2, [r2, #0]
 8001c48:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	015b      	lsls	r3, r3, #5
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d10d      	bne.n	8001c72 <HAL_UART_Receive+0xba>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d104      	bne.n	8001c68 <HAL_UART_Receive+0xb0>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	225c      	movs	r2, #92	; 0x5c
 8001c62:	4942      	ldr	r1, [pc, #264]	; (8001d6c <HAL_UART_Receive+0x1b4>)
 8001c64:	5299      	strh	r1, [r3, r2]
 8001c66:	e01a      	b.n	8001c9e <HAL_UART_Receive+0xe6>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	225c      	movs	r2, #92	; 0x5c
 8001c6c:	21ff      	movs	r1, #255	; 0xff
 8001c6e:	5299      	strh	r1, [r3, r2]
 8001c70:	e015      	b.n	8001c9e <HAL_UART_Receive+0xe6>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10d      	bne.n	8001c96 <HAL_UART_Receive+0xde>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d104      	bne.n	8001c8c <HAL_UART_Receive+0xd4>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	225c      	movs	r2, #92	; 0x5c
 8001c86:	21ff      	movs	r1, #255	; 0xff
 8001c88:	5299      	strh	r1, [r3, r2]
 8001c8a:	e008      	b.n	8001c9e <HAL_UART_Receive+0xe6>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	225c      	movs	r2, #92	; 0x5c
 8001c90:	217f      	movs	r1, #127	; 0x7f
 8001c92:	5299      	strh	r1, [r3, r2]
 8001c94:	e003      	b.n	8001c9e <HAL_UART_Receive+0xe6>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	225c      	movs	r2, #92	; 0x5c
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001c9e:	2312      	movs	r3, #18
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	215c      	movs	r1, #92	; 0x5c
 8001ca6:	5a52      	ldrh	r2, [r2, r1]
 8001ca8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	015b      	lsls	r3, r3, #5
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d108      	bne.n	8001cc8 <HAL_UART_Receive+0x110>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d104      	bne.n	8001cc8 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	e003      	b.n	8001cd0 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2274      	movs	r2, #116	; 0x74
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001cd8:	e037      	b.n	8001d4a <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	0013      	movs	r3, r2
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2120      	movs	r1, #32
 8001ce8:	f000 fa7e 	bl	80021e8 <UART_WaitOnFlagUntilTimeout>
 8001cec:	1e03      	subs	r3, r0, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e036      	b.n	8001d62 <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10e      	bne.n	8001d18 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2212      	movs	r2, #18
 8001d04:	18ba      	adds	r2, r7, r2
 8001d06:	8812      	ldrh	r2, [r2, #0]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	3302      	adds	r3, #2
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	e00f      	b.n	8001d38 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2212      	movs	r2, #18
 8001d24:	18ba      	adds	r2, r7, r2
 8001d26:	8812      	ldrh	r2, [r2, #0]
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3301      	adds	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	225a      	movs	r2, #90	; 0x5a
 8001d3c:	5a9b      	ldrh	r3, [r3, r2]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b299      	uxth	r1, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	225a      	movs	r2, #90	; 0x5a
 8001d48:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	225a      	movs	r2, #90	; 0x5a
 8001d4e:	5a9b      	ldrh	r3, [r3, r2]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1c1      	bne.n	8001cda <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e000      	b.n	8001d62 <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
  }
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b008      	add	sp, #32
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	000001ff 	.word	0x000001ff

08001d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d78:	231e      	movs	r3, #30
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a8d      	ldr	r2, [pc, #564]	; (8001fd4 <UART_SetConfig+0x264>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	0019      	movs	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a88      	ldr	r2, [pc, #544]	; (8001fd8 <UART_SetConfig+0x268>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a7f      	ldr	r2, [pc, #508]	; (8001fdc <UART_SetConfig+0x26c>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a7b      	ldr	r2, [pc, #492]	; (8001fe0 <UART_SetConfig+0x270>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d127      	bne.n	8001e46 <UART_SetConfig+0xd6>
 8001df6:	4b7b      	ldr	r3, [pc, #492]	; (8001fe4 <UART_SetConfig+0x274>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d00d      	beq.n	8001e1e <UART_SetConfig+0xae>
 8001e02:	d81b      	bhi.n	8001e3c <UART_SetConfig+0xcc>
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d014      	beq.n	8001e32 <UART_SetConfig+0xc2>
 8001e08:	d818      	bhi.n	8001e3c <UART_SetConfig+0xcc>
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <UART_SetConfig+0xa4>
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d00a      	beq.n	8001e28 <UART_SetConfig+0xb8>
 8001e12:	e013      	b.n	8001e3c <UART_SetConfig+0xcc>
 8001e14:	231f      	movs	r3, #31
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	e021      	b.n	8001e62 <UART_SetConfig+0xf2>
 8001e1e:	231f      	movs	r3, #31
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	2202      	movs	r2, #2
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e01c      	b.n	8001e62 <UART_SetConfig+0xf2>
 8001e28:	231f      	movs	r3, #31
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e017      	b.n	8001e62 <UART_SetConfig+0xf2>
 8001e32:	231f      	movs	r3, #31
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2208      	movs	r2, #8
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e012      	b.n	8001e62 <UART_SetConfig+0xf2>
 8001e3c:	231f      	movs	r3, #31
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2210      	movs	r2, #16
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e00d      	b.n	8001e62 <UART_SetConfig+0xf2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a67      	ldr	r2, [pc, #412]	; (8001fe8 <UART_SetConfig+0x278>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d104      	bne.n	8001e5a <UART_SetConfig+0xea>
 8001e50:	231f      	movs	r3, #31
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	e003      	b.n	8001e62 <UART_SetConfig+0xf2>
 8001e5a:	231f      	movs	r3, #31
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	2210      	movs	r2, #16
 8001e60:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d15d      	bne.n	8001f2a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001e6e:	231f      	movs	r3, #31
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d015      	beq.n	8001ea4 <UART_SetConfig+0x134>
 8001e78:	dc18      	bgt.n	8001eac <UART_SetConfig+0x13c>
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d00d      	beq.n	8001e9a <UART_SetConfig+0x12a>
 8001e7e:	dc15      	bgt.n	8001eac <UART_SetConfig+0x13c>
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <UART_SetConfig+0x11a>
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d005      	beq.n	8001e94 <UART_SetConfig+0x124>
 8001e88:	e010      	b.n	8001eac <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e8a:	f7ff fc95 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	61bb      	str	r3, [r7, #24]
        break;
 8001e92:	e012      	b.n	8001eba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e94:	4b55      	ldr	r3, [pc, #340]	; (8001fec <UART_SetConfig+0x27c>)
 8001e96:	61bb      	str	r3, [r7, #24]
        break;
 8001e98:	e00f      	b.n	8001eba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e9a:	f7ff fc1f 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	61bb      	str	r3, [r7, #24]
        break;
 8001ea2:	e00a      	b.n	8001eba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	61bb      	str	r3, [r7, #24]
        break;
 8001eaa:	e006      	b.n	8001eba <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001eb0:	231e      	movs	r3, #30
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
        break;
 8001eb8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d100      	bne.n	8001ec2 <UART_SetConfig+0x152>
 8001ec0:	e07b      	b.n	8001fba <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	005a      	lsls	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	18d2      	adds	r2, r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	0010      	movs	r0, r2
 8001ed6:	f7fe f917 	bl	8000108 <__udivsi3>
 8001eda:	0003      	movs	r3, r0
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b0f      	cmp	r3, #15
 8001ee4:	d91c      	bls.n	8001f20 <UART_SetConfig+0x1b0>
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	025b      	lsls	r3, r3, #9
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d217      	bcs.n	8001f20 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	200e      	movs	r0, #14
 8001ef6:	183b      	adds	r3, r7, r0
 8001ef8:	210f      	movs	r1, #15
 8001efa:	438a      	bics	r2, r1
 8001efc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	085b      	lsrs	r3, r3, #1
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2207      	movs	r2, #7
 8001f06:	4013      	ands	r3, r2
 8001f08:	b299      	uxth	r1, r3
 8001f0a:	183b      	adds	r3, r7, r0
 8001f0c:	183a      	adds	r2, r7, r0
 8001f0e:	8812      	ldrh	r2, [r2, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	183a      	adds	r2, r7, r0
 8001f1a:	8812      	ldrh	r2, [r2, #0]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	e04c      	b.n	8001fba <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001f20:	231e      	movs	r3, #30
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e047      	b.n	8001fba <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f2a:	231f      	movs	r3, #31
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d015      	beq.n	8001f60 <UART_SetConfig+0x1f0>
 8001f34:	dc18      	bgt.n	8001f68 <UART_SetConfig+0x1f8>
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d00d      	beq.n	8001f56 <UART_SetConfig+0x1e6>
 8001f3a:	dc15      	bgt.n	8001f68 <UART_SetConfig+0x1f8>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <UART_SetConfig+0x1d6>
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d005      	beq.n	8001f50 <UART_SetConfig+0x1e0>
 8001f44:	e010      	b.n	8001f68 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f46:	f7ff fc37 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	61bb      	str	r3, [r7, #24]
        break;
 8001f4e:	e012      	b.n	8001f76 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f50:	4b26      	ldr	r3, [pc, #152]	; (8001fec <UART_SetConfig+0x27c>)
 8001f52:	61bb      	str	r3, [r7, #24]
        break;
 8001f54:	e00f      	b.n	8001f76 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f56:	f7ff fbc1 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	61bb      	str	r3, [r7, #24]
        break;
 8001f5e:	e00a      	b.n	8001f76 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	61bb      	str	r3, [r7, #24]
        break;
 8001f66:	e006      	b.n	8001f76 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f6c:	231e      	movs	r3, #30
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
        break;
 8001f74:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01e      	beq.n	8001fba <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	085a      	lsrs	r2, r3, #1
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	18d2      	adds	r2, r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	0010      	movs	r0, r2
 8001f8e:	f7fe f8bb 	bl	8000108 <__udivsi3>
 8001f92:	0003      	movs	r3, r0
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b0f      	cmp	r3, #15
 8001f9c:	d909      	bls.n	8001fb2 <UART_SetConfig+0x242>
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	025b      	lsls	r3, r3, #9
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d204      	bcs.n	8001fb2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	e003      	b.n	8001fba <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001fb2:	231e      	movs	r3, #30
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001fc6:	231e      	movs	r3, #30
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	781b      	ldrb	r3, [r3, #0]
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b008      	add	sp, #32
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	ffff69f3 	.word	0xffff69f3
 8001fd8:	ffffcfff 	.word	0xffffcfff
 8001fdc:	fffff4ff 	.word	0xfffff4ff
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40004400 	.word	0x40004400
 8001fec:	007a1200 	.word	0x007a1200

08001ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4013      	ands	r3, r2
 8002000:	d00b      	beq.n	800201a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a4a      	ldr	r2, [pc, #296]	; (8002134 <UART_AdvFeatureConfig+0x144>)
 800200a:	4013      	ands	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	2202      	movs	r2, #2
 8002020:	4013      	ands	r3, r2
 8002022:	d00b      	beq.n	800203c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4a43      	ldr	r2, [pc, #268]	; (8002138 <UART_AdvFeatureConfig+0x148>)
 800202c:	4013      	ands	r3, r2
 800202e:	0019      	movs	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	2204      	movs	r2, #4
 8002042:	4013      	ands	r3, r2
 8002044:	d00b      	beq.n	800205e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a3b      	ldr	r2, [pc, #236]	; (800213c <UART_AdvFeatureConfig+0x14c>)
 800204e:	4013      	ands	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	2208      	movs	r2, #8
 8002064:	4013      	ands	r3, r2
 8002066:	d00b      	beq.n	8002080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4a34      	ldr	r2, [pc, #208]	; (8002140 <UART_AdvFeatureConfig+0x150>)
 8002070:	4013      	ands	r3, r2
 8002072:	0019      	movs	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	2210      	movs	r2, #16
 8002086:	4013      	ands	r3, r2
 8002088:	d00b      	beq.n	80020a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a2c      	ldr	r2, [pc, #176]	; (8002144 <UART_AdvFeatureConfig+0x154>)
 8002092:	4013      	ands	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2220      	movs	r2, #32
 80020a8:	4013      	ands	r3, r2
 80020aa:	d00b      	beq.n	80020c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4a25      	ldr	r2, [pc, #148]	; (8002148 <UART_AdvFeatureConfig+0x158>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2240      	movs	r2, #64	; 0x40
 80020ca:	4013      	ands	r3, r2
 80020cc:	d01d      	beq.n	800210a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a1d      	ldr	r2, [pc, #116]	; (800214c <UART_AdvFeatureConfig+0x15c>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	035b      	lsls	r3, r3, #13
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d10b      	bne.n	800210a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a15      	ldr	r2, [pc, #84]	; (8002150 <UART_AdvFeatureConfig+0x160>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	4013      	ands	r3, r2
 8002112:	d00b      	beq.n	800212c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <UART_AdvFeatureConfig+0x164>)
 800211c:	4013      	ands	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]
  }
}
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	b002      	add	sp, #8
 8002132:	bd80      	pop	{r7, pc}
 8002134:	fffdffff 	.word	0xfffdffff
 8002138:	fffeffff 	.word	0xfffeffff
 800213c:	fffbffff 	.word	0xfffbffff
 8002140:	ffff7fff 	.word	0xffff7fff
 8002144:	ffffefff 	.word	0xffffefff
 8002148:	ffffdfff 	.word	0xffffdfff
 800214c:	ffefffff 	.word	0xffefffff
 8002150:	ff9fffff 	.word	0xff9fffff
 8002154:	fff7ffff 	.word	0xfff7ffff

08002158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af02      	add	r7, sp, #8
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	2100      	movs	r1, #0
 8002166:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002168:	f7fe fc84 	bl	8000a74 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2208      	movs	r2, #8
 8002178:	4013      	ands	r3, r2
 800217a:	2b08      	cmp	r3, #8
 800217c:	d10c      	bne.n	8002198 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	0391      	lsls	r1, r2, #14
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <UART_CheckIdleState+0x8c>)
 8002188:	9200      	str	r2, [sp, #0]
 800218a:	2200      	movs	r2, #0
 800218c:	f000 f82c 	bl	80021e8 <UART_WaitOnFlagUntilTimeout>
 8002190:	1e03      	subs	r3, r0, #0
 8002192:	d001      	beq.n	8002198 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e021      	b.n	80021dc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2204      	movs	r2, #4
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d10c      	bne.n	80021c0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2280      	movs	r2, #128	; 0x80
 80021aa:	03d1      	lsls	r1, r2, #15
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <UART_CheckIdleState+0x8c>)
 80021b0:	9200      	str	r2, [sp, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f000 f818 	bl	80021e8 <UART_WaitOnFlagUntilTimeout>
 80021b8:	1e03      	subs	r3, r0, #0
 80021ba:	d001      	beq.n	80021c0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e00d      	b.n	80021dc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2220      	movs	r2, #32
 80021c4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2274      	movs	r2, #116	; 0x74
 80021d6:	2100      	movs	r1, #0
 80021d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b004      	add	sp, #16
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	01ffffff 	.word	0x01ffffff

080021e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b094      	sub	sp, #80	; 0x50
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021f8:	e0a3      	b.n	8002342 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021fc:	3301      	adds	r3, #1
 80021fe:	d100      	bne.n	8002202 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002200:	e09f      	b.n	8002342 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002202:	f7fe fc37 	bl	8000a74 <HAL_GetTick>
 8002206:	0002      	movs	r2, r0
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800220e:	429a      	cmp	r2, r3
 8002210:	d302      	bcc.n	8002218 <UART_WaitOnFlagUntilTimeout+0x30>
 8002212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002214:	2b00      	cmp	r3, #0
 8002216:	d13d      	bne.n	8002294 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002218:	f3ef 8310 	mrs	r3, PRIMASK
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002220:	647b      	str	r3, [r7, #68]	; 0x44
 8002222:	2301      	movs	r3, #1
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	f383 8810 	msr	PRIMASK, r3
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	494c      	ldr	r1, [pc, #304]	; (800236c <UART_WaitOnFlagUntilTimeout+0x184>)
 800223a:	400a      	ands	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	f383 8810 	msr	PRIMASK, r3
}
 8002248:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800224a:	f3ef 8310 	mrs	r3, PRIMASK
 800224e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002252:	643b      	str	r3, [r7, #64]	; 0x40
 8002254:	2301      	movs	r3, #1
 8002256:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225a:	f383 8810 	msr	PRIMASK, r3
}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2101      	movs	r1, #1
 800226c:	438a      	bics	r2, r1
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002276:	f383 8810 	msr	PRIMASK, r3
}
 800227a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2220      	movs	r2, #32
 8002286:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2274      	movs	r2, #116	; 0x74
 800228c:	2100      	movs	r1, #0
 800228e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e067      	b.n	8002364 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2204      	movs	r2, #4
 800229c:	4013      	ands	r3, r2
 800229e:	d050      	beq.n	8002342 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	401a      	ands	r2, r3
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d146      	bne.n	8002342 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2280      	movs	r2, #128	; 0x80
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022be:	f3ef 8310 	mrs	r3, PRIMASK
 80022c2:	613b      	str	r3, [r7, #16]
  return(result);
 80022c4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022c8:	2301      	movs	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f383 8810 	msr	PRIMASK, r3
}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4923      	ldr	r1, [pc, #140]	; (800236c <UART_WaitOnFlagUntilTimeout+0x184>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	f383 8810 	msr	PRIMASK, r3
}
 80022ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f0:	f3ef 8310 	mrs	r3, PRIMASK
 80022f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80022f6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80022fa:	2301      	movs	r3, #1
 80022fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	f383 8810 	msr	PRIMASK, r3
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	438a      	bics	r2, r1
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f383 8810 	msr	PRIMASK, r3
}
 8002320:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2220      	movs	r2, #32
 8002326:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2280      	movs	r2, #128	; 0x80
 8002332:	2120      	movs	r1, #32
 8002334:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2274      	movs	r2, #116	; 0x74
 800233a:	2100      	movs	r1, #0
 800233c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e010      	b.n	8002364 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	4013      	ands	r3, r2
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	425a      	negs	r2, r3
 8002352:	4153      	adcs	r3, r2
 8002354:	b2db      	uxtb	r3, r3
 8002356:	001a      	movs	r2, r3
 8002358:	1dfb      	adds	r3, r7, #7
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d100      	bne.n	8002362 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002360:	e74b      	b.n	80021fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	b014      	add	sp, #80	; 0x50
 800236a:	bd80      	pop	{r7, pc}
 800236c:	fffffe5f 	.word	0xfffffe5f

08002370 <__libc_init_array>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	2600      	movs	r6, #0
 8002374:	4d0c      	ldr	r5, [pc, #48]	; (80023a8 <__libc_init_array+0x38>)
 8002376:	4c0d      	ldr	r4, [pc, #52]	; (80023ac <__libc_init_array+0x3c>)
 8002378:	1b64      	subs	r4, r4, r5
 800237a:	10a4      	asrs	r4, r4, #2
 800237c:	42a6      	cmp	r6, r4
 800237e:	d109      	bne.n	8002394 <__libc_init_array+0x24>
 8002380:	2600      	movs	r6, #0
 8002382:	f000 f821 	bl	80023c8 <_init>
 8002386:	4d0a      	ldr	r5, [pc, #40]	; (80023b0 <__libc_init_array+0x40>)
 8002388:	4c0a      	ldr	r4, [pc, #40]	; (80023b4 <__libc_init_array+0x44>)
 800238a:	1b64      	subs	r4, r4, r5
 800238c:	10a4      	asrs	r4, r4, #2
 800238e:	42a6      	cmp	r6, r4
 8002390:	d105      	bne.n	800239e <__libc_init_array+0x2e>
 8002392:	bd70      	pop	{r4, r5, r6, pc}
 8002394:	00b3      	lsls	r3, r6, #2
 8002396:	58eb      	ldr	r3, [r5, r3]
 8002398:	4798      	blx	r3
 800239a:	3601      	adds	r6, #1
 800239c:	e7ee      	b.n	800237c <__libc_init_array+0xc>
 800239e:	00b3      	lsls	r3, r6, #2
 80023a0:	58eb      	ldr	r3, [r5, r3]
 80023a2:	4798      	blx	r3
 80023a4:	3601      	adds	r6, #1
 80023a6:	e7f2      	b.n	800238e <__libc_init_array+0x1e>
 80023a8:	08002450 	.word	0x08002450
 80023ac:	08002450 	.word	0x08002450
 80023b0:	08002450 	.word	0x08002450
 80023b4:	08002454 	.word	0x08002454

080023b8 <memset>:
 80023b8:	0003      	movs	r3, r0
 80023ba:	1882      	adds	r2, r0, r2
 80023bc:	4293      	cmp	r3, r2
 80023be:	d100      	bne.n	80023c2 <memset+0xa>
 80023c0:	4770      	bx	lr
 80023c2:	7019      	strb	r1, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	e7f9      	b.n	80023bc <memset+0x4>

080023c8 <_init>:
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ce:	bc08      	pop	{r3}
 80023d0:	469e      	mov	lr, r3
 80023d2:	4770      	bx	lr

080023d4 <_fini>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023da:	bc08      	pop	{r3}
 80023dc:	469e      	mov	lr, r3
 80023de:	4770      	bx	lr
