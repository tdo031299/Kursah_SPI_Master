
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c40  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d6c  08002d6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d6c  08002d6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d6c  08002d6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08002d80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002d80  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a117  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016cc  00000000  00000000  0002a14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002b818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002bff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001182b  00000000  00000000  0002c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a105  00000000  00000000  0003df7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a621  00000000  00000000  00048080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b26a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b48  00000000  00000000  000b26f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ce8 	.word	0x08002ce8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002ce8 	.word	0x08002ce8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <rx>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int rx(unsigned char *r) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	int result = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
	if (HAL_UART_Receive(&huart1, r, 1, 500) == HAL_OK) {
 800022c:	23fa      	movs	r3, #250	; 0xfa
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	6879      	ldr	r1, [r7, #4]
 8000232:	4806      	ldr	r0, [pc, #24]	; (800024c <rx+0x2c>)
 8000234:	2201      	movs	r2, #1
 8000236:	f002 f94f 	bl	80024d8 <HAL_UART_Receive>
 800023a:	1e03      	subs	r3, r0, #0
 800023c:	d101      	bne.n	8000242 <rx+0x22>
		result = 1;
 800023e:	2301      	movs	r3, #1
 8000240:	60fb      	str	r3, [r7, #12]
	}
	return result;
 8000242:	68fb      	ldr	r3, [r7, #12]
}
 8000244:	0018      	movs	r0, r3
 8000246:	46bd      	mov	sp, r7
 8000248:	b004      	add	sp, #16
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000002c 	.word	0x2000002c

08000250 <halfhex2char>:
	ST_M3,
	ST_Dn,
};
enum state_list main_state;

static char halfhex2char(char c) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	701a      	strb	r2, [r3, #0]
	char s;
	if (c >= '0' && c <= '9')
 800025c:	1dfb      	adds	r3, r7, #7
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b2f      	cmp	r3, #47	; 0x2f
 8000262:	d90a      	bls.n	800027a <halfhex2char+0x2a>
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b39      	cmp	r3, #57	; 0x39
 800026a:	d806      	bhi.n	800027a <halfhex2char+0x2a>
		s = c - '0';
 800026c:	230f      	movs	r3, #15
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	1dfa      	adds	r2, r7, #7
 8000272:	7812      	ldrb	r2, [r2, #0]
 8000274:	3a30      	subs	r2, #48	; 0x30
 8000276:	701a      	strb	r2, [r3, #0]
 8000278:	e00d      	b.n	8000296 <halfhex2char+0x46>
	else {
		if (c >= 'A' && c <= 'F')
 800027a:	1dfb      	adds	r3, r7, #7
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b40      	cmp	r3, #64	; 0x40
 8000280:	d909      	bls.n	8000296 <halfhex2char+0x46>
 8000282:	1dfb      	adds	r3, r7, #7
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b46      	cmp	r3, #70	; 0x46
 8000288:	d805      	bhi.n	8000296 <halfhex2char+0x46>
			s = c - 'A' + 10;
 800028a:	230f      	movs	r3, #15
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	1dfa      	adds	r2, r7, #7
 8000290:	7812      	ldrb	r2, [r2, #0]
 8000292:	3a37      	subs	r2, #55	; 0x37
 8000294:	701a      	strb	r2, [r3, #0]
	}
	return s;
 8000296:	230f      	movs	r3, #15
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	781b      	ldrb	r3, [r3, #0]
}
 800029c:	0018      	movs	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	b004      	add	sp, #16
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <hex2char>:

static char hex2char(char c1, char c2) {
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	0002      	movs	r2, r0
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	701a      	strb	r2, [r3, #0]
 80002b0:	1dbb      	adds	r3, r7, #6
 80002b2:	1c0a      	adds	r2, r1, #0
 80002b4:	701a      	strb	r2, [r3, #0]
	return (halfhex2char(c1) << 4) + halfhex2char(c2);
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	0018      	movs	r0, r3
 80002bc:	f7ff ffc8 	bl	8000250 <halfhex2char>
 80002c0:	0003      	movs	r3, r0
 80002c2:	011b      	lsls	r3, r3, #4
 80002c4:	b2dc      	uxtb	r4, r3
 80002c6:	1dbb      	adds	r3, r7, #6
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	0018      	movs	r0, r3
 80002cc:	f7ff ffc0 	bl	8000250 <halfhex2char>
 80002d0:	0003      	movs	r3, r0
 80002d2:	18e3      	adds	r3, r4, r3
 80002d4:	b2db      	uxtb	r3, r3
}
 80002d6:	0018      	movs	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	b003      	add	sp, #12
 80002dc:	bd90      	pop	{r4, r7, pc}

080002de <bytetohex>:

static char bytetohex(char c) {
 80002de:	b580      	push	{r7, lr}
 80002e0:	b084      	sub	sp, #16
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	0002      	movs	r2, r0
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	701a      	strb	r2, [r3, #0]
	char s;
	if (c >= 0x00 && c <= 0x09)
 80002ea:	1dfb      	adds	r3, r7, #7
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b09      	cmp	r3, #9
 80002f0:	d806      	bhi.n	8000300 <bytetohex+0x22>
		s = c + 0x30;
 80002f2:	230f      	movs	r3, #15
 80002f4:	18fb      	adds	r3, r7, r3
 80002f6:	1dfa      	adds	r2, r7, #7
 80002f8:	7812      	ldrb	r2, [r2, #0]
 80002fa:	3230      	adds	r2, #48	; 0x30
 80002fc:	701a      	strb	r2, [r3, #0]
 80002fe:	e00d      	b.n	800031c <bytetohex+0x3e>
	else {
		if (c >= 0x0A && c <= 0x0F)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b09      	cmp	r3, #9
 8000306:	d909      	bls.n	800031c <bytetohex+0x3e>
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b0f      	cmp	r3, #15
 800030e:	d805      	bhi.n	800031c <bytetohex+0x3e>
			s = c + 0x37;
 8000310:	230f      	movs	r3, #15
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	1dfa      	adds	r2, r7, #7
 8000316:	7812      	ldrb	r2, [r2, #0]
 8000318:	3237      	adds	r2, #55	; 0x37
 800031a:	701a      	strb	r2, [r3, #0]
	}
	return s;
 800031c:	230f      	movs	r3, #15
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	781b      	ldrb	r3, [r3, #0]
}
 8000322:	0018      	movs	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	b004      	add	sp, #16
 8000328:	bd80      	pop	{r7, pc}

0800032a <chtohex>:

static void chtohex(char c, unsigned char *str) {
 800032a:	b590      	push	{r4, r7, lr}
 800032c:	b083      	sub	sp, #12
 800032e:	af00      	add	r7, sp, #0
 8000330:	0002      	movs	r2, r0
 8000332:	6039      	str	r1, [r7, #0]
 8000334:	1dfb      	adds	r3, r7, #7
 8000336:	701a      	strb	r2, [r3, #0]
	str[0] = bytetohex(c >> 4);
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	091b      	lsrs	r3, r3, #4
 800033e:	b2db      	uxtb	r3, r3
 8000340:	0018      	movs	r0, r3
 8000342:	f7ff ffcc 	bl	80002de <bytetohex>
 8000346:	0003      	movs	r3, r0
 8000348:	001a      	movs	r2, r3
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	701a      	strb	r2, [r3, #0]
	str[1] = bytetohex(c * 0x0F);
 800034e:	1dfb      	adds	r3, r7, #7
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	1c1a      	adds	r2, r3, #0
 8000354:	0112      	lsls	r2, r2, #4
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	b2da      	uxtb	r2, r3
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	1c5c      	adds	r4, r3, #1
 800035e:	0010      	movs	r0, r2
 8000360:	f7ff ffbd 	bl	80002de <bytetohex>
 8000364:	0003      	movs	r3, r0
 8000366:	7023      	strb	r3, [r4, #0]
}
 8000368:	46c0      	nop			; (mov r8, r8)
 800036a:	46bd      	mov	sp, r7
 800036c:	b003      	add	sp, #12
 800036e:	bd90      	pop	{r4, r7, pc}

08000370 <SPI1_Init_Clk>:

static void SPI1_Init_Clk(uint32_t CLKPolarity, uint32_t CLKPhase) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <SPI1_Init_Clk+0x7c>)
 800037c:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <SPI1_Init_Clk+0x80>)
 800037e:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <SPI1_Init_Clk+0x7c>)
 8000382:	2282      	movs	r2, #130	; 0x82
 8000384:	0052      	lsls	r2, r2, #1
 8000386:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <SPI1_Init_Clk+0x7c>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800038e:	4b17      	ldr	r3, [pc, #92]	; (80003ec <SPI1_Init_Clk+0x7c>)
 8000390:	22e0      	movs	r2, #224	; 0xe0
 8000392:	00d2      	lsls	r2, r2, #3
 8000394:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = CLKPolarity;
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <SPI1_Init_Clk+0x7c>)
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = CLKPhase;
 800039c:	4b13      	ldr	r3, [pc, #76]	; (80003ec <SPI1_Init_Clk+0x7c>)
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <SPI1_Init_Clk+0x7c>)
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	0092      	lsls	r2, r2, #2
 80003a8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <SPI1_Init_Clk+0x7c>)
 80003ac:	2238      	movs	r2, #56	; 0x38
 80003ae:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b0:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <SPI1_Init_Clk+0x7c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b6:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <SPI1_Init_Clk+0x7c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003bc:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <SPI1_Init_Clk+0x7c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <SPI1_Init_Clk+0x7c>)
 80003c4:	2207      	movs	r2, #7
 80003c6:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <SPI1_Init_Clk+0x7c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003ce:	4b07      	ldr	r3, [pc, #28]	; (80003ec <SPI1_Init_Clk+0x7c>)
 80003d0:	2208      	movs	r2, #8
 80003d2:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <SPI1_Init_Clk+0x7c>)
 80003d6:	0018      	movs	r0, r3
 80003d8:	f001 fb80 	bl	8001adc <HAL_SPI_Init>
 80003dc:	1e03      	subs	r3, r0, #0
 80003de:	d001      	beq.n	80003e4 <SPI1_Init_Clk+0x74>
		Error_Handler();
 80003e0:	f000 fa82 	bl	80008e8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b002      	add	sp, #8
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200000b0 	.word	0x200000b0
 80003f0:	40013000 	.word	0x40013000

080003f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	b0a8      	sub	sp, #160	; 0xa0
 80003f8:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	main_state = ST_RESET;
 80003fa:	4bb3      	ldr	r3, [pc, #716]	; (80006c8 <main+0x2d4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000400:	f000 fb7c 	bl	8000afc <HAL_Init>
	char sy2;
	unsigned char c;
	unsigned char symbols[2];
	unsigned char buf[64];
	unsigned char rxbuf[64];
	int k = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	2290      	movs	r2, #144	; 0x90
 8000408:	18ba      	adds	r2, r7, r2
 800040a:	6013      	str	r3, [r2, #0]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800040c:	f000 f964 	bl	80006d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000410:	f000 fa32 	bl	8000878 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000414:	f000 fa00 	bl	8000818 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8000418:	f000 f9c0 	bl	800079c <MX_SPI1_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (rx(&c)) {
 800041c:	2389      	movs	r3, #137	; 0x89
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	0018      	movs	r0, r3
 8000422:	f7ff fefd 	bl	8000220 <rx>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d100      	bne.n	800042c <main+0x38>
 800042a:	e14a      	b.n	80006c2 <main+0x2ce>
			switch (main_state) {
 800042c:	4ba6      	ldr	r3, [pc, #664]	; (80006c8 <main+0x2d4>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b0c      	cmp	r3, #12
 8000432:	d900      	bls.n	8000436 <main+0x42>
 8000434:	e141      	b.n	80006ba <main+0x2c6>
 8000436:	009a      	lsls	r2, r3, #2
 8000438:	4ba4      	ldr	r3, [pc, #656]	; (80006cc <main+0x2d8>)
 800043a:	18d3      	adds	r3, r2, r3
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	469f      	mov	pc, r3
			case ST_RESET:
				switch (c) {
 8000440:	2389      	movs	r3, #137	; 0x89
 8000442:	18fb      	adds	r3, r7, r3
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b4d      	cmp	r3, #77	; 0x4d
 8000448:	d00c      	beq.n	8000464 <main+0x70>
 800044a:	dc0f      	bgt.n	800046c <main+0x78>
 800044c:	2b43      	cmp	r3, #67	; 0x43
 800044e:	d005      	beq.n	800045c <main+0x68>
 8000450:	2b44      	cmp	r3, #68	; 0x44
 8000452:	d10b      	bne.n	800046c <main+0x78>
				case 'D':
					main_state = ST_D1;
 8000454:	4b9c      	ldr	r3, [pc, #624]	; (80006c8 <main+0x2d4>)
 8000456:	2201      	movs	r2, #1
 8000458:	701a      	strb	r2, [r3, #0]
					break;
 800045a:	e00b      	b.n	8000474 <main+0x80>
				case 'C':
					main_state = ST_C;
 800045c:	4b9a      	ldr	r3, [pc, #616]	; (80006c8 <main+0x2d4>)
 800045e:	2204      	movs	r2, #4
 8000460:	701a      	strb	r2, [r3, #0]
					break;
 8000462:	e007      	b.n	8000474 <main+0x80>
				case 'M':
					main_state = ST_M;
 8000464:	4b98      	ldr	r3, [pc, #608]	; (80006c8 <main+0x2d4>)
 8000466:	2205      	movs	r2, #5
 8000468:	701a      	strb	r2, [r3, #0]
					break;
 800046a:	e003      	b.n	8000474 <main+0x80>
				default:
					main_state = ST_RESET;
 800046c:	4b96      	ldr	r3, [pc, #600]	; (80006c8 <main+0x2d4>)
 800046e:	2200      	movs	r2, #0
 8000470:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000472:	e127      	b.n	80006c4 <main+0x2d0>
 8000474:	e126      	b.n	80006c4 <main+0x2d0>

			case ST_C:
				switch (c) {
 8000476:	2389      	movs	r3, #137	; 0x89
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b53      	cmp	r3, #83	; 0x53
 800047e:	d103      	bne.n	8000488 <main+0x94>
				case 'S':
					main_state = ST_CS;
 8000480:	4b91      	ldr	r3, [pc, #580]	; (80006c8 <main+0x2d4>)
 8000482:	2206      	movs	r2, #6
 8000484:	701a      	strb	r2, [r3, #0]
					break;
 8000486:	e002      	b.n	800048e <main+0x9a>
				default:
					main_state = ST_RESET;
 8000488:	4b8f      	ldr	r3, [pc, #572]	; (80006c8 <main+0x2d4>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
				}

			case ST_CS:
				switch (c) {
 800048e:	2389      	movs	r3, #137	; 0x89
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b30      	cmp	r3, #48	; 0x30
 8000496:	d002      	beq.n	800049e <main+0xaa>
 8000498:	2b31      	cmp	r3, #49	; 0x31
 800049a:	d004      	beq.n	80004a6 <main+0xb2>
 800049c:	e007      	b.n	80004ae <main+0xba>
				case '0':
					main_state = ST_CSn0;
 800049e:	4b8a      	ldr	r3, [pc, #552]	; (80006c8 <main+0x2d4>)
 80004a0:	2207      	movs	r2, #7
 80004a2:	701a      	strb	r2, [r3, #0]
					break;
 80004a4:	e007      	b.n	80004b6 <main+0xc2>
				case '1':
					main_state = ST_CSn1;
 80004a6:	4b88      	ldr	r3, [pc, #544]	; (80006c8 <main+0x2d4>)
 80004a8:	2208      	movs	r2, #8
 80004aa:	701a      	strb	r2, [r3, #0]
					break;
 80004ac:	e003      	b.n	80004b6 <main+0xc2>
				default:
					main_state = ST_RESET;
 80004ae:	4b86      	ldr	r3, [pc, #536]	; (80006c8 <main+0x2d4>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	701a      	strb	r2, [r3, #0]
				}
				break;
 80004b4:	e106      	b.n	80006c4 <main+0x2d0>
 80004b6:	e105      	b.n	80006c4 <main+0x2d0>

			case ST_CSn0:
				switch (c) {
 80004b8:	2389      	movs	r3, #137	; 0x89
 80004ba:	18fb      	adds	r3, r7, r3
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b0a      	cmp	r3, #10
 80004c0:	d10b      	bne.n	80004da <main+0xe6>
				case '\n':
					HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin,
 80004c2:	2390      	movs	r3, #144	; 0x90
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	2200      	movs	r2, #0
 80004c8:	2110      	movs	r1, #16
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fd9e 	bl	800100c <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					main_state = ST_RESET;
 80004d0:	4b7d      	ldr	r3, [pc, #500]	; (80006c8 <main+0x2d4>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
					break;
 80004d6:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 80004d8:	e0f4      	b.n	80006c4 <main+0x2d0>
					main_state = ST_RESET;
 80004da:	4b7b      	ldr	r3, [pc, #492]	; (80006c8 <main+0x2d4>)
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
				break;
 80004e0:	e0f0      	b.n	80006c4 <main+0x2d0>

			case ST_CSn1:
				switch (c) {
 80004e2:	2389      	movs	r3, #137	; 0x89
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b0a      	cmp	r3, #10
 80004ea:	d10b      	bne.n	8000504 <main+0x110>
				case '\n':
					HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin,
 80004ec:	2390      	movs	r3, #144	; 0x90
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	2201      	movs	r2, #1
 80004f2:	2110      	movs	r1, #16
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 fd89 	bl	800100c <HAL_GPIO_WritePin>
							GPIO_PIN_SET);
					main_state = ST_RESET;
 80004fa:	4b73      	ldr	r3, [pc, #460]	; (80006c8 <main+0x2d4>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
					break;
 8000500:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 8000502:	e0df      	b.n	80006c4 <main+0x2d0>
					main_state = ST_RESET;
 8000504:	4b70      	ldr	r3, [pc, #448]	; (80006c8 <main+0x2d4>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
				break;
 800050a:	e0db      	b.n	80006c4 <main+0x2d0>

			case ST_M:
				switch (c) {
 800050c:	2389      	movs	r3, #137	; 0x89
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b33      	cmp	r3, #51	; 0x33
 8000514:	d014      	beq.n	8000540 <main+0x14c>
 8000516:	dc17      	bgt.n	8000548 <main+0x154>
 8000518:	2b32      	cmp	r3, #50	; 0x32
 800051a:	d00d      	beq.n	8000538 <main+0x144>
 800051c:	dc14      	bgt.n	8000548 <main+0x154>
 800051e:	2b30      	cmp	r3, #48	; 0x30
 8000520:	d002      	beq.n	8000528 <main+0x134>
 8000522:	2b31      	cmp	r3, #49	; 0x31
 8000524:	d004      	beq.n	8000530 <main+0x13c>
 8000526:	e00f      	b.n	8000548 <main+0x154>
				case '0':
					main_state = ST_M0;
 8000528:	4b67      	ldr	r3, [pc, #412]	; (80006c8 <main+0x2d4>)
 800052a:	2209      	movs	r2, #9
 800052c:	701a      	strb	r2, [r3, #0]
					break;
 800052e:	e00f      	b.n	8000550 <main+0x15c>
				case '1':
					main_state = ST_M1;
 8000530:	4b65      	ldr	r3, [pc, #404]	; (80006c8 <main+0x2d4>)
 8000532:	220a      	movs	r2, #10
 8000534:	701a      	strb	r2, [r3, #0]
					break;
 8000536:	e00b      	b.n	8000550 <main+0x15c>
				case '2':
					main_state = ST_M2;
 8000538:	4b63      	ldr	r3, [pc, #396]	; (80006c8 <main+0x2d4>)
 800053a:	220b      	movs	r2, #11
 800053c:	701a      	strb	r2, [r3, #0]
					break;
 800053e:	e007      	b.n	8000550 <main+0x15c>
				case '3':
					main_state = ST_M3;
 8000540:	4b61      	ldr	r3, [pc, #388]	; (80006c8 <main+0x2d4>)
 8000542:	220c      	movs	r2, #12
 8000544:	701a      	strb	r2, [r3, #0]
					break;
 8000546:	e003      	b.n	8000550 <main+0x15c>
				default:
					main_state = ST_RESET;
 8000548:	4b5f      	ldr	r3, [pc, #380]	; (80006c8 <main+0x2d4>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800054e:	e0b9      	b.n	80006c4 <main+0x2d0>
 8000550:	e0b8      	b.n	80006c4 <main+0x2d0>

			case ST_M0:
				switch (c) {
 8000552:	2389      	movs	r3, #137	; 0x89
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b0a      	cmp	r3, #10
 800055a:	d108      	bne.n	800056e <main+0x17a>
				case '\n':
					SPI1_Init_Clk(SPI_POLARITY_LOW, SPI_PHASE_1EDGE);
 800055c:	2100      	movs	r1, #0
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff ff06 	bl	8000370 <SPI1_Init_Clk>
					main_state = ST_RESET;
 8000564:	4b58      	ldr	r3, [pc, #352]	; (80006c8 <main+0x2d4>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
					break;
 800056a:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 800056c:	e0aa      	b.n	80006c4 <main+0x2d0>
					main_state = ST_RESET;
 800056e:	4b56      	ldr	r3, [pc, #344]	; (80006c8 <main+0x2d4>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
				break;
 8000574:	e0a6      	b.n	80006c4 <main+0x2d0>

			case ST_M1:
				switch (c) {
 8000576:	2389      	movs	r3, #137	; 0x89
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b0a      	cmp	r3, #10
 800057e:	d108      	bne.n	8000592 <main+0x19e>
				case '\n':
					SPI1_Init_Clk(SPI_POLARITY_LOW, SPI_PHASE_2EDGE);
 8000580:	2101      	movs	r1, #1
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff fef4 	bl	8000370 <SPI1_Init_Clk>
					main_state = ST_RESET;
 8000588:	4b4f      	ldr	r3, [pc, #316]	; (80006c8 <main+0x2d4>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
					break;
 800058e:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 8000590:	e098      	b.n	80006c4 <main+0x2d0>
					main_state = ST_RESET;
 8000592:	4b4d      	ldr	r3, [pc, #308]	; (80006c8 <main+0x2d4>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
				break;
 8000598:	e094      	b.n	80006c4 <main+0x2d0>

			case ST_M2:
				switch (c) {
 800059a:	2389      	movs	r3, #137	; 0x89
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b0a      	cmp	r3, #10
 80005a2:	d108      	bne.n	80005b6 <main+0x1c2>
				case '\n':
					SPI1_Init_Clk(SPI_POLARITY_HIGH, SPI_PHASE_1EDGE);
 80005a4:	2100      	movs	r1, #0
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff fee2 	bl	8000370 <SPI1_Init_Clk>
					main_state = ST_RESET;
 80005ac:	4b46      	ldr	r3, [pc, #280]	; (80006c8 <main+0x2d4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
					break;
 80005b2:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 80005b4:	e086      	b.n	80006c4 <main+0x2d0>
					main_state = ST_RESET;
 80005b6:	4b44      	ldr	r3, [pc, #272]	; (80006c8 <main+0x2d4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
				break;
 80005bc:	e082      	b.n	80006c4 <main+0x2d0>

			case ST_M3:
				switch (c) {
 80005be:	2389      	movs	r3, #137	; 0x89
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b0a      	cmp	r3, #10
 80005c6:	d108      	bne.n	80005da <main+0x1e6>
				case '\n':
					SPI1_Init_Clk(SPI_POLARITY_HIGH, SPI_PHASE_2EDGE);
 80005c8:	2101      	movs	r1, #1
 80005ca:	2002      	movs	r0, #2
 80005cc:	f7ff fed0 	bl	8000370 <SPI1_Init_Clk>
					main_state = ST_RESET;
 80005d0:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <main+0x2d4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
					break;
 80005d6:	46c0      	nop			; (mov r8, r8)
				default:
					main_state = ST_RESET;
				}
				break;
 80005d8:	e074      	b.n	80006c4 <main+0x2d0>
					main_state = ST_RESET;
 80005da:	4b3b      	ldr	r3, [pc, #236]	; (80006c8 <main+0x2d4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
				break;
 80005e0:	e070      	b.n	80006c4 <main+0x2d0>

			case ST_D1:
				switch (c) {
 80005e2:	2389      	movs	r3, #137	; 0x89
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b0a      	cmp	r3, #10
 80005ea:	d136      	bne.n	800065a <main+0x266>
				case '\n':
					HAL_SPI_TransmitReceive(&hspi1, &buf[0], &rxbuf[0], k, 500);
 80005ec:	2390      	movs	r3, #144	; 0x90
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	b29c      	uxth	r4, r3
 80005f4:	1d3a      	adds	r2, r7, #4
 80005f6:	2344      	movs	r3, #68	; 0x44
 80005f8:	18f9      	adds	r1, r7, r3
 80005fa:	4835      	ldr	r0, [pc, #212]	; (80006d0 <main+0x2dc>)
 80005fc:	23fa      	movs	r3, #250	; 0xfa
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	0023      	movs	r3, r4
 8000604:	f001 fb22 	bl	8001c4c <HAL_SPI_TransmitReceive>
					for (int i = 0; i < k; i++) {
 8000608:	2300      	movs	r3, #0
 800060a:	228c      	movs	r2, #140	; 0x8c
 800060c:	18ba      	adds	r2, r7, r2
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	e017      	b.n	8000642 <main+0x24e>
						chtohex(rxbuf[i], symbols);
 8000612:	1d3a      	adds	r2, r7, #4
 8000614:	248c      	movs	r4, #140	; 0x8c
 8000616:	193b      	adds	r3, r7, r4
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	18d3      	adds	r3, r2, r3
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2584      	movs	r5, #132	; 0x84
 8000620:	197a      	adds	r2, r7, r5
 8000622:	0011      	movs	r1, r2
 8000624:	0018      	movs	r0, r3
 8000626:	f7ff fe80 	bl	800032a <chtohex>
						HAL_UART_Transmit(&huart1, &symbols[0], 2, 500);
 800062a:	23fa      	movs	r3, #250	; 0xfa
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	1979      	adds	r1, r7, r5
 8000630:	4828      	ldr	r0, [pc, #160]	; (80006d4 <main+0x2e0>)
 8000632:	2202      	movs	r2, #2
 8000634:	f001 fea6 	bl	8002384 <HAL_UART_Transmit>
					for (int i = 0; i < k; i++) {
 8000638:	193b      	adds	r3, r7, r4
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	193a      	adds	r2, r7, r4
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	238c      	movs	r3, #140	; 0x8c
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	2390      	movs	r3, #144	; 0x90
 800064a:	18fb      	adds	r3, r7, r3
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	429a      	cmp	r2, r3
 8000650:	dbdf      	blt.n	8000612 <main+0x21e>
					}
					main_state = ST_RESET;
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <main+0x2d4>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
					break;
 8000658:	e009      	b.n	800066e <main+0x27a>
				default:
					sy1 = c;
 800065a:	2397      	movs	r3, #151	; 0x97
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	2289      	movs	r2, #137	; 0x89
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	7812      	ldrb	r2, [r2, #0]
 8000664:	701a      	strb	r2, [r3, #0]
					main_state = ST_D2;
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <main+0x2d4>)
 8000668:	2202      	movs	r2, #2
 800066a:	701a      	strb	r2, [r3, #0]
					break;
 800066c:	46c0      	nop			; (mov r8, r8)
				}
				break;
 800066e:	e029      	b.n	80006c4 <main+0x2d0>

			case ST_D2:
				sy2 = c;
 8000670:	218b      	movs	r1, #139	; 0x8b
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2289      	movs	r2, #137	; 0x89
 8000676:	18ba      	adds	r2, r7, r2
 8000678:	7812      	ldrb	r2, [r2, #0]
 800067a:	701a      	strb	r2, [r3, #0]
				ress = hex2char(sy1, sy2);
 800067c:	258a      	movs	r5, #138	; 0x8a
 800067e:	197c      	adds	r4, r7, r5
 8000680:	187b      	adds	r3, r7, r1
 8000682:	781a      	ldrb	r2, [r3, #0]
 8000684:	2397      	movs	r3, #151	; 0x97
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f7ff fe09 	bl	80002a4 <hex2char>
 8000692:	0003      	movs	r3, r0
 8000694:	7023      	strb	r3, [r4, #0]
				buf[k] = ress;
 8000696:	2344      	movs	r3, #68	; 0x44
 8000698:	18fa      	adds	r2, r7, r3
 800069a:	2190      	movs	r1, #144	; 0x90
 800069c:	187b      	adds	r3, r7, r1
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	18d3      	adds	r3, r2, r3
 80006a2:	197a      	adds	r2, r7, r5
 80006a4:	7812      	ldrb	r2, [r2, #0]
 80006a6:	701a      	strb	r2, [r3, #0]
				k++;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	187a      	adds	r2, r7, r1
 80006b0:	6013      	str	r3, [r2, #0]
				main_state = ST_D1;
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <main+0x2d4>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
				break;
 80006b8:	e004      	b.n	80006c4 <main+0x2d0>
			default:
				main_state = ST_RESET;
 80006ba:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <main+0x2d4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	e6ac      	b.n	800041c <main+0x28>

			}
		}
 80006c2:	46c0      	nop			; (mov r8, r8)
		if (rx(&c)) {
 80006c4:	e6aa      	b.n	800041c <main+0x28>
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000028 	.word	0x20000028
 80006cc:	08002d20 	.word	0x08002d20
 80006d0:	200000b0 	.word	0x200000b0
 80006d4:	2000002c 	.word	0x2000002c

080006d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b097      	sub	sp, #92	; 0x5c
 80006dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006de:	2428      	movs	r4, #40	; 0x28
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	0018      	movs	r0, r3
 80006e4:	2330      	movs	r3, #48	; 0x30
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f002 faf5 	bl	8002cd8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006ee:	2318      	movs	r3, #24
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	0018      	movs	r0, r3
 80006f4:	2310      	movs	r3, #16
 80006f6:	001a      	movs	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f002 faed 	bl	8002cd8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	0018      	movs	r0, r3
 8000702:	2314      	movs	r3, #20
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f002 fae6 	bl	8002cd8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	0021      	movs	r1, r4
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2202      	movs	r2, #2
 8000712:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2201      	movs	r2, #1
 8000718:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2210      	movs	r2, #16
 800071e:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2202      	movs	r2, #2
 8000724:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	22a0      	movs	r2, #160	; 0xa0
 8000730:	0392      	lsls	r2, r2, #14
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800073a:	187b      	adds	r3, r7, r1
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fc83 	bl	8001048 <HAL_RCC_OscConfig>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x72>
		Error_Handler();
 8000746:	f000 f8cf 	bl	80008e8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800074a:	2118      	movs	r1, #24
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2207      	movs	r2, #7
 8000750:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2202      	movs	r2, #2
 8000756:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2101      	movs	r1, #1
 8000768:	0018      	movs	r0, r3
 800076a:	f000 ff87 	bl	800167c <HAL_RCC_ClockConfig>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x9e>
		Error_Handler();
 8000772:	f000 f8b9 	bl	80008e8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2201      	movs	r2, #1
 800077a:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	0018      	movs	r0, r3
 8000786:	f001 f8cb 	bl	8001920 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xba>
		Error_Handler();
 800078e:	f000 f8ab 	bl	80008e8 <Error_Handler>
	}
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b017      	add	sp, #92	; 0x5c
 8000798:	bd90      	pop	{r4, r7, pc}
	...

0800079c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_SPI1_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_SPI1_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_SPI1_Init+0x74>)
 80007a8:	2282      	movs	r2, #130	; 0x82
 80007aa:	0052      	lsls	r2, r2, #1
 80007ac:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_SPI1_Init+0x74>)
 80007b6:	22e0      	movs	r2, #224	; 0xe0
 80007b8:	00d2      	lsls	r2, r2, #3
 80007ba:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_SPI1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_SPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_SPI1_Init+0x74>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	0092      	lsls	r2, r2, #2
 80007ce:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_SPI1_Init+0x74>)
 80007d2:	2238      	movs	r2, #56	; 0x38
 80007d4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SPI1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SPI1_Init+0x74>)
 80007ea:	2207      	movs	r2, #7
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_SPI1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SPI1_Init+0x74>)
 80007f6:	2208      	movs	r2, #8
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <MX_SPI1_Init+0x74>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 f96d 	bl	8001adc <HAL_SPI_Init>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000806:	f000 f86f 	bl	80008e8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000b0 	.word	0x200000b0
 8000814:	40013000 	.word	0x40013000

08000818 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USART1_UART_Init+0x58>)
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 8000820:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_USART1_UART_Init+0x58>)
 8000824:	22e1      	movs	r2, #225	; 0xe1
 8000826:	0252      	lsls	r2, r2, #9
 8000828:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART1_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_USART1_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART1_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART1_UART_Init+0x58>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART1_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART1_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART1_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART1_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <MX_USART1_UART_Init+0x58>)
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fd3d 	bl	80022dc <HAL_UART_Init>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000866:	f000 f83f 	bl	80008e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000002c 	.word	0x2000002c
 8000874:	40013800 	.word	0x40013800

08000878 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	0018      	movs	r0, r3
 8000882:	2314      	movs	r3, #20
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f002 fa26 	bl	8002cd8 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_GPIO_Init+0x6c>)
 800088e:	695a      	ldr	r2, [r3, #20]
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_GPIO_Init+0x6c>)
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	0289      	lsls	r1, r1, #10
 8000896:	430a      	orrs	r2, r1
 8000898:	615a      	str	r2, [r3, #20]
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_GPIO_Init+0x6c>)
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	029b      	lsls	r3, r3, #10
 80008a2:	4013      	ands	r3, r2
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80008a8:	2390      	movs	r3, #144	; 0x90
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	2200      	movs	r2, #0
 80008ae:	2110      	movs	r1, #16
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fbab 	bl	800100c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPI1_NSS_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2210      	movs	r2, #16
 80008ba:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2201      	movs	r2, #1
 80008c0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80008ce:	1d3a      	adds	r2, r7, #4
 80008d0:	2390      	movs	r3, #144	; 0x90
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fa28 	bl	8000d2c <HAL_GPIO_Init>

}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b006      	add	sp, #24
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000

080008e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x44>)
 80008fc:	699a      	ldr	r2, [r3, #24]
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_MspInit+0x44>)
 8000900:	2101      	movs	r1, #1
 8000902:	430a      	orrs	r2, r1
 8000904:	619a      	str	r2, [r3, #24]
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x44>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	2201      	movs	r2, #1
 800090c:	4013      	ands	r3, r2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x44>)
 8000914:	69da      	ldr	r2, [r3, #28]
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_MspInit+0x44>)
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	0549      	lsls	r1, r1, #21
 800091c:	430a      	orrs	r2, r1
 800091e:	61da      	str	r2, [r3, #28]
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_MspInit+0x44>)
 8000922:	69da      	ldr	r2, [r3, #28]
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	055b      	lsls	r3, r3, #21
 8000928:	4013      	ands	r3, r2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b08b      	sub	sp, #44	; 0x2c
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	2414      	movs	r4, #20
 8000946:	193b      	adds	r3, r7, r4
 8000948:	0018      	movs	r0, r3
 800094a:	2314      	movs	r3, #20
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f002 f9c2 	bl	8002cd8 <memset>
  if(hspi->Instance==SPI1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <HAL_SPI_MspInit+0x90>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d132      	bne.n	80009c4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <HAL_SPI_MspInit+0x94>)
 8000960:	699a      	ldr	r2, [r3, #24]
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_SPI_MspInit+0x94>)
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0149      	lsls	r1, r1, #5
 8000968:	430a      	orrs	r2, r1
 800096a:	619a      	str	r2, [r3, #24]
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_SPI_MspInit+0x94>)
 800096e:	699a      	ldr	r2, [r3, #24]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	015b      	lsls	r3, r3, #5
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_SPI_MspInit+0x94>)
 800097c:	695a      	ldr	r2, [r3, #20]
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_SPI_MspInit+0x94>)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0289      	lsls	r1, r1, #10
 8000984:	430a      	orrs	r2, r1
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_SPI_MspInit+0x94>)
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	029b      	lsls	r3, r3, #10
 8000990:	4013      	ands	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000996:	0021      	movs	r1, r4
 8000998:	187b      	adds	r3, r7, r1
 800099a:	22e0      	movs	r2, #224	; 0xe0
 800099c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2202      	movs	r2, #2
 80009a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2203      	movs	r2, #3
 80009ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	187a      	adds	r2, r7, r1
 80009b8:	2390      	movs	r3, #144	; 0x90
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f9b4 	bl	8000d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b00b      	add	sp, #44	; 0x2c
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	40013000 	.word	0x40013000
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b08b      	sub	sp, #44	; 0x2c
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	2414      	movs	r4, #20
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	0018      	movs	r0, r3
 80009e2:	2314      	movs	r3, #20
 80009e4:	001a      	movs	r2, r3
 80009e6:	2100      	movs	r1, #0
 80009e8:	f002 f976 	bl	8002cd8 <memset>
  if(huart->Instance==USART1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a1d      	ldr	r2, [pc, #116]	; (8000a68 <HAL_UART_MspInit+0x94>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d133      	bne.n	8000a5e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <HAL_UART_MspInit+0x98>)
 80009f8:	699a      	ldr	r2, [r3, #24]
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <HAL_UART_MspInit+0x98>)
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	01c9      	lsls	r1, r1, #7
 8000a00:	430a      	orrs	r2, r1
 8000a02:	619a      	str	r2, [r3, #24]
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <HAL_UART_MspInit+0x98>)
 8000a06:	699a      	ldr	r2, [r3, #24]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	01db      	lsls	r3, r3, #7
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_UART_MspInit+0x98>)
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_UART_MspInit+0x98>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0289      	lsls	r1, r1, #10
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_UART_MspInit+0x98>)
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	029b      	lsls	r3, r3, #10
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	22c0      	movs	r2, #192	; 0xc0
 8000a32:	00d2      	lsls	r2, r2, #3
 8000a34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	0021      	movs	r1, r4
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2203      	movs	r2, #3
 8000a48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	187a      	adds	r2, r7, r1
 8000a52:	2390      	movs	r3, #144	; 0x90
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 f967 	bl	8000d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b00b      	add	sp, #44	; 0x2c
 8000a64:	bd90      	pop	{r4, r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40013800 	.word	0x40013800
 8000a6c:	40021000 	.word	0x40021000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f87a 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aaa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aae:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac4:	4c0b      	ldr	r4, [pc, #44]	; (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ad2:	f7ff ffe4 	bl	8000a9e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ad6:	f002 f8db 	bl	8002c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ada:	f7ff fc8b 	bl	80003f4 <main>

08000ade <LoopForever>:

LoopForever:
    b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   r0, =_estack
 8000ae0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aec:	08002d74 	.word	0x08002d74
  ldr r2, =_sbss
 8000af0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af4:	20000118 	.word	0x20000118

08000af8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_COMP_IRQHandler>
	...

08000afc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <HAL_Init+0x24>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_Init+0x24>)
 8000b06:	2110      	movs	r1, #16
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 f809 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b12:	f7ff feef 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	40022000 	.word	0x40022000

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b2e:	681c      	ldr	r4, [r3, #0]
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_InitTick+0x60>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	0019      	movs	r1, r3
 8000b36:	23fa      	movs	r3, #250	; 0xfa
 8000b38:	0098      	lsls	r0, r3, #2
 8000b3a:	f7ff fae5 	bl	8000108 <__udivsi3>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	0019      	movs	r1, r3
 8000b42:	0020      	movs	r0, r4
 8000b44:	f7ff fae0 	bl	8000108 <__udivsi3>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 f8e1 	bl	8000d12 <HAL_SYSTICK_Config>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e00f      	b.n	8000b78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d80b      	bhi.n	8000b76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	2301      	movs	r3, #1
 8000b62:	425b      	negs	r3, r3
 8000b64:	2200      	movs	r2, #0
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 f8be 	bl	8000ce8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_InitTick+0x64>)
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b003      	add	sp, #12
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x1c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	001a      	movs	r2, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_IncTick+0x20>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	18d2      	adds	r2, r2, r3
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_IncTick+0x20>)
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000114 	.word	0x20000114

08000bb0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <HAL_GetTick+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	20000114 	.word	0x20000114

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	0002      	movs	r2, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd8:	d828      	bhi.n	8000c2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bda:	4a2f      	ldr	r2, [pc, #188]	; (8000c98 <__NVIC_SetPriority+0xd4>)
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	33c0      	adds	r3, #192	; 0xc0
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	589b      	ldr	r3, [r3, r2]
 8000bea:	1dfa      	adds	r2, r7, #7
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	0011      	movs	r1, r2
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	00d2      	lsls	r2, r2, #3
 8000bf6:	21ff      	movs	r1, #255	; 0xff
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	43d2      	mvns	r2, r2
 8000bfe:	401a      	ands	r2, r3
 8000c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	22ff      	movs	r2, #255	; 0xff
 8000c08:	401a      	ands	r2, r3
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	2303      	movs	r3, #3
 8000c12:	4003      	ands	r3, r0
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c18:	481f      	ldr	r0, [pc, #124]	; (8000c98 <__NVIC_SetPriority+0xd4>)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	430a      	orrs	r2, r1
 8000c24:	33c0      	adds	r3, #192	; 0xc0
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c2a:	e031      	b.n	8000c90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <__NVIC_SetPriority+0xd8>)
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	0019      	movs	r1, r3
 8000c34:	230f      	movs	r3, #15
 8000c36:	400b      	ands	r3, r1
 8000c38:	3b08      	subs	r3, #8
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	3306      	adds	r3, #6
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	3304      	adds	r3, #4
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	1dfa      	adds	r2, r7, #7
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	400a      	ands	r2, r1
 8000c50:	00d2      	lsls	r2, r2, #3
 8000c52:	21ff      	movs	r1, #255	; 0xff
 8000c54:	4091      	lsls	r1, r2
 8000c56:	000a      	movs	r2, r1
 8000c58:	43d2      	mvns	r2, r2
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	019b      	lsls	r3, r3, #6
 8000c62:	22ff      	movs	r2, #255	; 0xff
 8000c64:	401a      	ands	r2, r3
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	4003      	ands	r3, r0
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c74:	4809      	ldr	r0, [pc, #36]	; (8000c9c <__NVIC_SetPriority+0xd8>)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	001c      	movs	r4, r3
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	4023      	ands	r3, r4
 8000c80:	3b08      	subs	r3, #8
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	430a      	orrs	r2, r1
 8000c86:	3306      	adds	r3, #6
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	18c3      	adds	r3, r0, r3
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	601a      	str	r2, [r3, #0]
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b003      	add	sp, #12
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	1e5a      	subs	r2, r3, #1
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	045b      	lsls	r3, r3, #17
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d301      	bcc.n	8000cb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e010      	b.n	8000cda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <SysTick_Config+0x44>)
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	3a01      	subs	r2, #1
 8000cbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f7ff ff7c 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x44>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x44>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	1c02      	adds	r2, r0, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	0011      	movs	r1, r2
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ffbf 	bl	8000ca0 <SysTick_Config>
 8000d22:	0003      	movs	r3, r0
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	e14f      	b.n	8000fdc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	4091      	lsls	r1, r2
 8000d46:	000a      	movs	r2, r1
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d100      	bne.n	8000d54 <HAL_GPIO_Init+0x28>
 8000d52:	e140      	b.n	8000fd6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d005      	beq.n	8000d6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2203      	movs	r2, #3
 8000d66:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d130      	bne.n	8000dce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	43da      	mvns	r2, r3
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da2:	2201      	movs	r2, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	43da      	mvns	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	2201      	movs	r2, #1
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d017      	beq.n	8000e0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d123      	bne.n	8000e5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	58d3      	ldr	r3, [r2, r3]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2207      	movs	r2, #7
 8000e28:	4013      	ands	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	691a      	ldr	r2, [r3, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2107      	movs	r1, #7
 8000e42:	400b      	ands	r3, r1
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	6939      	ldr	r1, [r7, #16]
 8000e5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	23c0      	movs	r3, #192	; 0xc0
 8000e98:	029b      	lsls	r3, r3, #10
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d100      	bne.n	8000ea0 <HAL_GPIO_Init+0x174>
 8000e9e:	e09a      	b.n	8000fd6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea0:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <HAL_GPIO_Init+0x2c8>)
 8000ea2:	699a      	ldr	r2, [r3, #24]
 8000ea4:	4b53      	ldr	r3, [pc, #332]	; (8000ff4 <HAL_GPIO_Init+0x2c8>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	619a      	str	r2, [r3, #24]
 8000eac:	4b51      	ldr	r3, [pc, #324]	; (8000ff4 <HAL_GPIO_Init+0x2c8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eb8:	4a4f      	ldr	r2, [pc, #316]	; (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	589b      	ldr	r3, [r3, r2]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	4013      	ands	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	2390      	movs	r3, #144	; 0x90
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x1e2>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a44      	ldr	r2, [pc, #272]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x1de>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a43      	ldr	r2, [pc, #268]	; (8001000 <HAL_GPIO_Init+0x2d4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x1da>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a42      	ldr	r2, [pc, #264]	; (8001004 <HAL_GPIO_Init+0x2d8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x1d6>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x1e4>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_Init+0x1e4>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_Init+0x1e4>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x1e4>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	2103      	movs	r1, #3
 8000f14:	400a      	ands	r2, r1
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f20:	4935      	ldr	r1, [pc, #212]	; (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43da      	mvns	r2, r3
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	025b      	lsls	r3, r3, #9
 8000f46:	4013      	ands	r3, r2
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	43da      	mvns	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	029b      	lsls	r3, r3, #10
 8000f70:	4013      	ands	r3, r2
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	035b      	lsls	r3, r3, #13
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43da      	mvns	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	039b      	lsls	r3, r3, #14
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	40da      	lsrs	r2, r3
 8000fe4:	1e13      	subs	r3, r2, #0
 8000fe6:	d000      	beq.n	8000fea <HAL_GPIO_Init+0x2be>
 8000fe8:	e6a8      	b.n	8000d3c <HAL_GPIO_Init+0x10>
  } 
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b006      	add	sp, #24
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	48000400 	.word	0x48000400
 8001000:	48000800 	.word	0x48000800
 8001004:	48000c00 	.word	0x48000c00
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	0008      	movs	r0, r1
 8001016:	0011      	movs	r1, r2
 8001018:	1cbb      	adds	r3, r7, #2
 800101a:	1c02      	adds	r2, r0, #0
 800101c:	801a      	strh	r2, [r3, #0]
 800101e:	1c7b      	adds	r3, r7, #1
 8001020:	1c0a      	adds	r2, r1, #0
 8001022:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001024:	1c7b      	adds	r3, r7, #1
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102c:	1cbb      	adds	r3, r7, #2
 800102e:	881a      	ldrh	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001034:	e003      	b.n	800103e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001036:	1cbb      	adds	r3, r7, #2
 8001038:	881a      	ldrh	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e301      	b.n	800165e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2201      	movs	r2, #1
 8001060:	4013      	ands	r3, r2
 8001062:	d100      	bne.n	8001066 <HAL_RCC_OscConfig+0x1e>
 8001064:	e08d      	b.n	8001182 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001066:	4bc3      	ldr	r3, [pc, #780]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	220c      	movs	r2, #12
 800106c:	4013      	ands	r3, r2
 800106e:	2b04      	cmp	r3, #4
 8001070:	d00e      	beq.n	8001090 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001072:	4bc0      	ldr	r3, [pc, #768]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	220c      	movs	r2, #12
 8001078:	4013      	ands	r3, r2
 800107a:	2b08      	cmp	r3, #8
 800107c:	d116      	bne.n	80010ac <HAL_RCC_OscConfig+0x64>
 800107e:	4bbd      	ldr	r3, [pc, #756]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	025b      	lsls	r3, r3, #9
 8001086:	401a      	ands	r2, r3
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	025b      	lsls	r3, r3, #9
 800108c:	429a      	cmp	r2, r3
 800108e:	d10d      	bne.n	80010ac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	4bb8      	ldr	r3, [pc, #736]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	4013      	ands	r3, r2
 800109a:	d100      	bne.n	800109e <HAL_RCC_OscConfig+0x56>
 800109c:	e070      	b.n	8001180 <HAL_RCC_OscConfig+0x138>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d000      	beq.n	80010a8 <HAL_RCC_OscConfig+0x60>
 80010a6:	e06b      	b.n	8001180 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e2d8      	b.n	800165e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d107      	bne.n	80010c4 <HAL_RCC_OscConfig+0x7c>
 80010b4:	4baf      	ldr	r3, [pc, #700]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4bae      	ldr	r3, [pc, #696]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	0249      	lsls	r1, r1, #9
 80010be:	430a      	orrs	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	e02f      	b.n	8001124 <HAL_RCC_OscConfig+0xdc>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10c      	bne.n	80010e6 <HAL_RCC_OscConfig+0x9e>
 80010cc:	4ba9      	ldr	r3, [pc, #676]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4ba8      	ldr	r3, [pc, #672]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010d2:	49a9      	ldr	r1, [pc, #676]	; (8001378 <HAL_RCC_OscConfig+0x330>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	4ba6      	ldr	r3, [pc, #664]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4ba5      	ldr	r3, [pc, #660]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010de:	49a7      	ldr	r1, [pc, #668]	; (800137c <HAL_RCC_OscConfig+0x334>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e01e      	b.n	8001124 <HAL_RCC_OscConfig+0xdc>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b05      	cmp	r3, #5
 80010ec:	d10e      	bne.n	800110c <HAL_RCC_OscConfig+0xc4>
 80010ee:	4ba1      	ldr	r3, [pc, #644]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4ba0      	ldr	r3, [pc, #640]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	02c9      	lsls	r1, r1, #11
 80010f8:	430a      	orrs	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	4b9d      	ldr	r3, [pc, #628]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b9c      	ldr	r3, [pc, #624]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	0249      	lsls	r1, r1, #9
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e00b      	b.n	8001124 <HAL_RCC_OscConfig+0xdc>
 800110c:	4b99      	ldr	r3, [pc, #612]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b98      	ldr	r3, [pc, #608]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001112:	4999      	ldr	r1, [pc, #612]	; (8001378 <HAL_RCC_OscConfig+0x330>)
 8001114:	400a      	ands	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	4b96      	ldr	r3, [pc, #600]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b95      	ldr	r3, [pc, #596]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800111e:	4997      	ldr	r1, [pc, #604]	; (800137c <HAL_RCC_OscConfig+0x334>)
 8001120:	400a      	ands	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d014      	beq.n	8001156 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fd40 	bl	8000bb0 <HAL_GetTick>
 8001130:	0003      	movs	r3, r0
 8001132:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001136:	f7ff fd3b 	bl	8000bb0 <HAL_GetTick>
 800113a:	0002      	movs	r2, r0
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b64      	cmp	r3, #100	; 0x64
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e28a      	b.n	800165e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001148:	4b8a      	ldr	r3, [pc, #552]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	029b      	lsls	r3, r3, #10
 8001150:	4013      	ands	r3, r2
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0xee>
 8001154:	e015      	b.n	8001182 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff fd2b 	bl	8000bb0 <HAL_GetTick>
 800115a:	0003      	movs	r3, r0
 800115c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fd26 	bl	8000bb0 <HAL_GetTick>
 8001164:	0002      	movs	r2, r0
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e275      	b.n	800165e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001172:	4b80      	ldr	r3, [pc, #512]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	029b      	lsls	r3, r3, #10
 800117a:	4013      	ands	r3, r2
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x118>
 800117e:	e000      	b.n	8001182 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001180:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2202      	movs	r2, #2
 8001188:	4013      	ands	r3, r2
 800118a:	d100      	bne.n	800118e <HAL_RCC_OscConfig+0x146>
 800118c:	e069      	b.n	8001262 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800118e:	4b79      	ldr	r3, [pc, #484]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	220c      	movs	r2, #12
 8001194:	4013      	ands	r3, r2
 8001196:	d00b      	beq.n	80011b0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001198:	4b76      	ldr	r3, [pc, #472]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	220c      	movs	r2, #12
 800119e:	4013      	ands	r3, r2
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d11c      	bne.n	80011de <HAL_RCC_OscConfig+0x196>
 80011a4:	4b73      	ldr	r3, [pc, #460]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	025b      	lsls	r3, r3, #9
 80011ac:	4013      	ands	r3, r2
 80011ae:	d116      	bne.n	80011de <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b0:	4b70      	ldr	r3, [pc, #448]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2202      	movs	r2, #2
 80011b6:	4013      	ands	r3, r2
 80011b8:	d005      	beq.n	80011c6 <HAL_RCC_OscConfig+0x17e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d001      	beq.n	80011c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e24b      	b.n	800165e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c6:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	22f8      	movs	r2, #248	; 0xf8
 80011cc:	4393      	bics	r3, r2
 80011ce:	0019      	movs	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	00da      	lsls	r2, r3, #3
 80011d6:	4b67      	ldr	r3, [pc, #412]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80011d8:	430a      	orrs	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011dc:	e041      	b.n	8001262 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d024      	beq.n	8001230 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e6:	4b63      	ldr	r3, [pc, #396]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b62      	ldr	r3, [pc, #392]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fcdd 	bl	8000bb0 <HAL_GetTick>
 80011f6:	0003      	movs	r3, r0
 80011f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fc:	f7ff fcd8 	bl	8000bb0 <HAL_GetTick>
 8001200:	0002      	movs	r2, r0
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e227      	b.n	800165e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120e:	4b59      	ldr	r3, [pc, #356]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2202      	movs	r2, #2
 8001214:	4013      	ands	r3, r2
 8001216:	d0f1      	beq.n	80011fc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b56      	ldr	r3, [pc, #344]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	22f8      	movs	r2, #248	; 0xf8
 800121e:	4393      	bics	r3, r2
 8001220:	0019      	movs	r1, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	00da      	lsls	r2, r3, #3
 8001228:	4b52      	ldr	r3, [pc, #328]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e018      	b.n	8001262 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001230:	4b50      	ldr	r3, [pc, #320]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b4f      	ldr	r3, [pc, #316]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001236:	2101      	movs	r1, #1
 8001238:	438a      	bics	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fcb8 	bl	8000bb0 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff fcb3 	bl	8000bb0 <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e202      	b.n	800165e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	d1f1      	bne.n	8001246 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2208      	movs	r2, #8
 8001268:	4013      	ands	r3, r2
 800126a:	d036      	beq.n	80012da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d019      	beq.n	80012a8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001274:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001278:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800127a:	2101      	movs	r1, #1
 800127c:	430a      	orrs	r2, r1
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001280:	f7ff fc96 	bl	8000bb0 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff fc91 	bl	8000bb0 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e1e0      	b.n	800165e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129c:	4b35      	ldr	r3, [pc, #212]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2202      	movs	r2, #2
 80012a2:	4013      	ands	r3, r2
 80012a4:	d0f1      	beq.n	800128a <HAL_RCC_OscConfig+0x242>
 80012a6:	e018      	b.n	80012da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a8:	4b32      	ldr	r3, [pc, #200]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80012aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ac:	4b31      	ldr	r3, [pc, #196]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80012ae:	2101      	movs	r1, #1
 80012b0:	438a      	bics	r2, r1
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff fc7c 	bl	8000bb0 <HAL_GetTick>
 80012b8:	0003      	movs	r3, r0
 80012ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012be:	f7ff fc77 	bl	8000bb0 <HAL_GetTick>
 80012c2:	0002      	movs	r2, r0
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e1c6      	b.n	800165e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	4b28      	ldr	r3, [pc, #160]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	2202      	movs	r2, #2
 80012d6:	4013      	ands	r3, r2
 80012d8:	d1f1      	bne.n	80012be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2204      	movs	r2, #4
 80012e0:	4013      	ands	r3, r2
 80012e2:	d100      	bne.n	80012e6 <HAL_RCC_OscConfig+0x29e>
 80012e4:	e0b4      	b.n	8001450 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e6:	201f      	movs	r0, #31
 80012e8:	183b      	adds	r3, r7, r0
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80012f0:	69da      	ldr	r2, [r3, #28]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	055b      	lsls	r3, r3, #21
 80012f6:	4013      	ands	r3, r2
 80012f8:	d110      	bne.n	800131c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80012fc:	69da      	ldr	r2, [r3, #28]
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0549      	lsls	r1, r1, #21
 8001304:	430a      	orrs	r2, r1
 8001306:	61da      	str	r2, [r3, #28]
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800130a:	69da      	ldr	r2, [r3, #28]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	055b      	lsls	r3, r3, #21
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001316:	183b      	adds	r3, r7, r0
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_RCC_OscConfig+0x338>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4013      	ands	r3, r2
 8001326:	d11a      	bne.n	800135e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_RCC_OscConfig+0x338>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <HAL_RCC_OscConfig+0x338>)
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	0049      	lsls	r1, r1, #1
 8001332:	430a      	orrs	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001336:	f7ff fc3b 	bl	8000bb0 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001340:	f7ff fc36 	bl	8000bb0 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e185      	b.n	800165e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_OscConfig+0x338>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4013      	ands	r3, r2
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10e      	bne.n	8001384 <HAL_RCC_OscConfig+0x33c>
 8001366:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001368:	6a1a      	ldr	r2, [r3, #32]
 800136a:	4b02      	ldr	r3, [pc, #8]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800136c:	2101      	movs	r1, #1
 800136e:	430a      	orrs	r2, r1
 8001370:	621a      	str	r2, [r3, #32]
 8001372:	e035      	b.n	80013e0 <HAL_RCC_OscConfig+0x398>
 8001374:	40021000 	.word	0x40021000
 8001378:	fffeffff 	.word	0xfffeffff
 800137c:	fffbffff 	.word	0xfffbffff
 8001380:	40007000 	.word	0x40007000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x35e>
 800138c:	4bb6      	ldr	r3, [pc, #728]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 800138e:	6a1a      	ldr	r2, [r3, #32]
 8001390:	4bb5      	ldr	r3, [pc, #724]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001392:	2101      	movs	r1, #1
 8001394:	438a      	bics	r2, r1
 8001396:	621a      	str	r2, [r3, #32]
 8001398:	4bb3      	ldr	r3, [pc, #716]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 800139a:	6a1a      	ldr	r2, [r3, #32]
 800139c:	4bb2      	ldr	r3, [pc, #712]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 800139e:	2104      	movs	r1, #4
 80013a0:	438a      	bics	r2, r1
 80013a2:	621a      	str	r2, [r3, #32]
 80013a4:	e01c      	b.n	80013e0 <HAL_RCC_OscConfig+0x398>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b05      	cmp	r3, #5
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x380>
 80013ae:	4bae      	ldr	r3, [pc, #696]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80013b0:	6a1a      	ldr	r2, [r3, #32]
 80013b2:	4bad      	ldr	r3, [pc, #692]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80013b4:	2104      	movs	r1, #4
 80013b6:	430a      	orrs	r2, r1
 80013b8:	621a      	str	r2, [r3, #32]
 80013ba:	4bab      	ldr	r3, [pc, #684]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80013bc:	6a1a      	ldr	r2, [r3, #32]
 80013be:	4baa      	ldr	r3, [pc, #680]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	430a      	orrs	r2, r1
 80013c4:	621a      	str	r2, [r3, #32]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0x398>
 80013c8:	4ba7      	ldr	r3, [pc, #668]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80013ca:	6a1a      	ldr	r2, [r3, #32]
 80013cc:	4ba6      	ldr	r3, [pc, #664]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	438a      	bics	r2, r1
 80013d2:	621a      	str	r2, [r3, #32]
 80013d4:	4ba4      	ldr	r3, [pc, #656]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80013d6:	6a1a      	ldr	r2, [r3, #32]
 80013d8:	4ba3      	ldr	r3, [pc, #652]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80013da:	2104      	movs	r1, #4
 80013dc:	438a      	bics	r2, r1
 80013de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d014      	beq.n	8001412 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e8:	f7ff fbe2 	bl	8000bb0 <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f0:	e009      	b.n	8001406 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f7ff fbdd 	bl	8000bb0 <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4a9b      	ldr	r2, [pc, #620]	; (800166c <HAL_RCC_OscConfig+0x624>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e12b      	b.n	800165e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001406:	4b98      	ldr	r3, [pc, #608]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x3aa>
 8001410:	e013      	b.n	800143a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fbcd 	bl	8000bb0 <HAL_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141a:	e009      	b.n	8001430 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7ff fbc8 	bl	8000bb0 <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4a91      	ldr	r2, [pc, #580]	; (800166c <HAL_RCC_OscConfig+0x624>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e116      	b.n	800165e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001430:	4b8d      	ldr	r3, [pc, #564]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	2202      	movs	r2, #2
 8001436:	4013      	ands	r3, r2
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800143a:	231f      	movs	r3, #31
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001444:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001446:	69da      	ldr	r2, [r3, #28]
 8001448:	4b87      	ldr	r3, [pc, #540]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 800144a:	4989      	ldr	r1, [pc, #548]	; (8001670 <HAL_RCC_OscConfig+0x628>)
 800144c:	400a      	ands	r2, r1
 800144e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2210      	movs	r2, #16
 8001456:	4013      	ands	r3, r2
 8001458:	d063      	beq.n	8001522 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d12a      	bne.n	80014b8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001462:	4b81      	ldr	r3, [pc, #516]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001466:	4b80      	ldr	r3, [pc, #512]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001468:	2104      	movs	r1, #4
 800146a:	430a      	orrs	r2, r1
 800146c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800146e:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001472:	4b7d      	ldr	r3, [pc, #500]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001474:	2101      	movs	r1, #1
 8001476:	430a      	orrs	r2, r1
 8001478:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fb99 	bl	8000bb0 <HAL_GetTick>
 800147e:	0003      	movs	r3, r0
 8001480:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001484:	f7ff fb94 	bl	8000bb0 <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e0e3      	b.n	800165e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	2202      	movs	r2, #2
 800149c:	4013      	ands	r3, r2
 800149e:	d0f1      	beq.n	8001484 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014a0:	4b71      	ldr	r3, [pc, #452]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	22f8      	movs	r2, #248	; 0xf8
 80014a6:	4393      	bics	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	00da      	lsls	r2, r3, #3
 80014b0:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80014b2:	430a      	orrs	r2, r1
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34
 80014b6:	e034      	b.n	8001522 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	3305      	adds	r3, #5
 80014be:	d111      	bne.n	80014e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014c0:	4b69      	ldr	r3, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80014c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c4:	4b68      	ldr	r3, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80014c6:	2104      	movs	r1, #4
 80014c8:	438a      	bics	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014cc:	4b66      	ldr	r3, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80014ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d0:	22f8      	movs	r2, #248	; 0xf8
 80014d2:	4393      	bics	r3, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	00da      	lsls	r2, r3, #3
 80014dc:	4b62      	ldr	r3, [pc, #392]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80014de:	430a      	orrs	r2, r1
 80014e0:	635a      	str	r2, [r3, #52]	; 0x34
 80014e2:	e01e      	b.n	8001522 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014e4:	4b60      	ldr	r3, [pc, #384]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80014e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e8:	4b5f      	ldr	r3, [pc, #380]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80014ea:	2104      	movs	r1, #4
 80014ec:	430a      	orrs	r2, r1
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014f0:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80014f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f4:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	438a      	bics	r2, r1
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7ff fb58 	bl	8000bb0 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001506:	f7ff fb53 	bl	8000bb0 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0a2      	b.n	800165e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 800151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d1f1      	bne.n	8001506 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d100      	bne.n	800152c <HAL_RCC_OscConfig+0x4e4>
 800152a:	e097      	b.n	800165c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800152c:	4b4e      	ldr	r3, [pc, #312]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	220c      	movs	r2, #12
 8001532:	4013      	ands	r3, r2
 8001534:	2b08      	cmp	r3, #8
 8001536:	d100      	bne.n	800153a <HAL_RCC_OscConfig+0x4f2>
 8001538:	e06b      	b.n	8001612 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d14c      	bne.n	80015dc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001542:	4b49      	ldr	r3, [pc, #292]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b48      	ldr	r3, [pc, #288]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001548:	494a      	ldr	r1, [pc, #296]	; (8001674 <HAL_RCC_OscConfig+0x62c>)
 800154a:	400a      	ands	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fb2f 	bl	8000bb0 <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff fb2a 	bl	8000bb0 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e079      	b.n	800165e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156a:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	049b      	lsls	r3, r3, #18
 8001572:	4013      	ands	r3, r2
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	220f      	movs	r2, #15
 800157c:	4393      	bics	r3, r2
 800157e:	0019      	movs	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001584:	4b38      	ldr	r3, [pc, #224]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001586:	430a      	orrs	r2, r1
 8001588:	62da      	str	r2, [r3, #44]	; 0x2c
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4a3a      	ldr	r2, [pc, #232]	; (8001678 <HAL_RCC_OscConfig+0x630>)
 8001590:	4013      	ands	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	431a      	orrs	r2, r3
 800159e:	4b32      	ldr	r3, [pc, #200]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a4:	4b30      	ldr	r3, [pc, #192]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	0449      	lsls	r1, r1, #17
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fafd 	bl	8000bb0 <HAL_GetTick>
 80015b6:	0003      	movs	r3, r0
 80015b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff faf8 	bl	8000bb0 <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e047      	b.n	800165e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	049b      	lsls	r3, r3, #18
 80015d6:	4013      	ands	r3, r2
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x574>
 80015da:	e03f      	b.n	800165c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b21      	ldr	r3, [pc, #132]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 80015e2:	4924      	ldr	r1, [pc, #144]	; (8001674 <HAL_RCC_OscConfig+0x62c>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fae2 	bl	8000bb0 <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fadd 	bl	8000bb0 <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e02c      	b.n	800165e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	049b      	lsls	r3, r3, #18
 800160c:	4013      	ands	r3, r2
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5aa>
 8001610:	e024      	b.n	800165c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e01f      	b.n	800165e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_RCC_OscConfig+0x620>)
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	401a      	ands	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	429a      	cmp	r2, r3
 8001638:	d10e      	bne.n	8001658 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	220f      	movs	r2, #15
 800163e:	401a      	ands	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001644:	429a      	cmp	r2, r3
 8001646:	d107      	bne.n	8001658 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	23f0      	movs	r3, #240	; 0xf0
 800164c:	039b      	lsls	r3, r3, #14
 800164e:	401a      	ands	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	b008      	add	sp, #32
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	40021000 	.word	0x40021000
 800166c:	00001388 	.word	0x00001388
 8001670:	efffffff 	.word	0xefffffff
 8001674:	feffffff 	.word	0xfeffffff
 8001678:	ffc2ffff 	.word	0xffc2ffff

0800167c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0b3      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2201      	movs	r2, #1
 8001696:	4013      	ands	r3, r2
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d911      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b58      	ldr	r3, [pc, #352]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4393      	bics	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	4b55      	ldr	r3, [pc, #340]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b0:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	4013      	ands	r3, r2
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e09a      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d015      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2204      	movs	r2, #4
 80016d2:	4013      	ands	r3, r2
 80016d4:	d006      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016d6:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80016dc:	21e0      	movs	r1, #224	; 0xe0
 80016de:	00c9      	lsls	r1, r1, #3
 80016e0:	430a      	orrs	r2, r1
 80016e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	22f0      	movs	r2, #240	; 0xf0
 80016ea:	4393      	bics	r3, r2
 80016ec:	0019      	movs	r1, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	4b44      	ldr	r3, [pc, #272]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80016f4:	430a      	orrs	r2, r1
 80016f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	d040      	beq.n	8001784 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	029b      	lsls	r3, r3, #10
 8001712:	4013      	ands	r3, r2
 8001714:	d114      	bne.n	8001740 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e06e      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b38      	ldr	r3, [pc, #224]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	049b      	lsls	r3, r3, #18
 800172a:	4013      	ands	r3, r2
 800172c:	d108      	bne.n	8001740 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e062      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b34      	ldr	r3, [pc, #208]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2202      	movs	r2, #2
 8001738:	4013      	ands	r3, r2
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e05b      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2203      	movs	r2, #3
 8001746:	4393      	bics	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 8001750:	430a      	orrs	r2, r1
 8001752:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff fa2c 	bl	8000bb0 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175c:	e009      	b.n	8001772 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175e:	f7ff fa27 	bl	8000bb0 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <HAL_RCC_ClockConfig+0x18c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e042      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	220c      	movs	r2, #12
 8001778:	401a      	ands	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1ec      	bne.n	800175e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2201      	movs	r2, #1
 800178a:	4013      	ands	r3, r2
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d211      	bcs.n	80017b6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2201      	movs	r2, #1
 8001798:	4393      	bics	r3, r2
 800179a:	0019      	movs	r1, r3
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4013      	ands	r3, r2
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d001      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e020      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2204      	movs	r2, #4
 80017bc:	4013      	ands	r3, r2
 80017be:	d009      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_RCC_ClockConfig+0x190>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80017d0:	430a      	orrs	r2, r1
 80017d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017d4:	f000 f820 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 80017d8:	0001      	movs	r1, r0
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	220f      	movs	r2, #15
 80017e2:	4013      	ands	r3, r2
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_RCC_ClockConfig+0x194>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	000a      	movs	r2, r1
 80017ea:	40da      	lsrs	r2, r3
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_ClockConfig+0x198>)
 80017ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff f997 	bl	8000b24 <HAL_InitTick>
  
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b004      	add	sp, #16
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40022000 	.word	0x40022000
 8001804:	40021000 	.word	0x40021000
 8001808:	00001388 	.word	0x00001388
 800180c:	fffff8ff 	.word	0xfffff8ff
 8001810:	08002d54 	.word	0x08002d54
 8001814:	20000000 	.word	0x20000000

08001818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b08f      	sub	sp, #60	; 0x3c
 800181c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800181e:	2314      	movs	r3, #20
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	4a2b      	ldr	r2, [pc, #172]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001824:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001826:	c313      	stmia	r3!, {r0, r1, r4}
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4a29      	ldr	r2, [pc, #164]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001830:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001832:	c313      	stmia	r3!, {r0, r1, r4}
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001854:	220c      	movs	r2, #12
 8001856:	4013      	ands	r3, r2
 8001858:	2b04      	cmp	r3, #4
 800185a:	d002      	beq.n	8001862 <HAL_RCC_GetSysClockFreq+0x4a>
 800185c:	2b08      	cmp	r3, #8
 800185e:	d003      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x50>
 8001860:	e02d      	b.n	80018be <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001866:	e02d      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	220f      	movs	r2, #15
 800186e:	4013      	ands	r3, r2
 8001870:	2214      	movs	r2, #20
 8001872:	18ba      	adds	r2, r7, r2
 8001874:	5cd3      	ldrb	r3, [r2, r3]
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	220f      	movs	r2, #15
 800187e:	4013      	ands	r3, r2
 8001880:	1d3a      	adds	r2, r7, #4
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	025b      	lsls	r3, r3, #9
 800188c:	4013      	ands	r3, r2
 800188e:	d009      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001892:	4812      	ldr	r0, [pc, #72]	; (80018dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001894:	f7fe fc38 	bl	8000108 <__udivsi3>
 8001898:	0003      	movs	r3, r0
 800189a:	001a      	movs	r2, r3
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	4353      	muls	r3, r2
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
 80018a2:	e009      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80018a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018a6:	000a      	movs	r2, r1
 80018a8:	0152      	lsls	r2, r2, #5
 80018aa:	1a52      	subs	r2, r2, r1
 80018ac:	0193      	lsls	r3, r2, #6
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	185b      	adds	r3, r3, r1
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80018b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018bc:	e002      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b00f      	add	sp, #60	; 0x3c
 80018cc:	bd90      	pop	{r4, r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	08002d00 	.word	0x08002d00
 80018d4:	08002d10 	.word	0x08002d10
 80018d8:	40021000 	.word	0x40021000
 80018dc:	007a1200 	.word	0x007a1200

080018e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	20000000 	.word	0x20000000

080018f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80018f8:	f7ff fff2 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 80018fc:	0001      	movs	r1, r0
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	2207      	movs	r2, #7
 8001906:	4013      	ands	r3, r2
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_RCC_GetPCLK1Freq+0x28>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	40d9      	lsrs	r1, r3
 800190e:	000b      	movs	r3, r1
}    
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	40021000 	.word	0x40021000
 800191c:	08002d64 	.word	0x08002d64

08001920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	4013      	ands	r3, r2
 800193a:	d100      	bne.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800193c:	e08e      	b.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800193e:	2017      	movs	r0, #23
 8001940:	183b      	adds	r3, r7, r0
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001946:	4b5f      	ldr	r3, [pc, #380]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001948:	69da      	ldr	r2, [r3, #28]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	055b      	lsls	r3, r3, #21
 800194e:	4013      	ands	r3, r2
 8001950:	d110      	bne.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b5c      	ldr	r3, [pc, #368]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001954:	69da      	ldr	r2, [r3, #28]
 8001956:	4b5b      	ldr	r3, [pc, #364]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	0549      	lsls	r1, r1, #21
 800195c:	430a      	orrs	r2, r1
 800195e:	61da      	str	r2, [r3, #28]
 8001960:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001962:	69da      	ldr	r2, [r3, #28]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196e:	183b      	adds	r3, r7, r0
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b54      	ldr	r3, [pc, #336]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4013      	ands	r3, r2
 800197e:	d11a      	bne.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001980:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	0049      	lsls	r1, r1, #1
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff f90f 	bl	8000bb0 <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	e008      	b.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7ff f90a 	bl	8000bb0 <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e087      	b.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019b8:	6a1a      	ldr	r2, [r3, #32]
 80019ba:	23c0      	movs	r3, #192	; 0xc0
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4013      	ands	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d034      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	23c0      	movs	r3, #192	; 0xc0
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4013      	ands	r3, r2
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d02c      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019d8:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4a3b      	ldr	r2, [pc, #236]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019de:	4013      	ands	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019e4:	6a1a      	ldr	r2, [r3, #32]
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	0249      	lsls	r1, r1, #9
 80019ec:	430a      	orrs	r2, r1
 80019ee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019f0:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019f2:	6a1a      	ldr	r2, [r3, #32]
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019f6:	4936      	ldr	r1, [pc, #216]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019fc:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f8d1 	bl	8000bb0 <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a12:	e009      	b.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7ff f8cc 	bl	8000bb0 <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	4a2d      	ldr	r2, [pc, #180]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e048      	b.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a46:	2317      	movs	r3, #23
 8001a48:	18fb      	adds	r3, r7, r3
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a52:	69da      	ldr	r2, [r3, #28]
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a56:	4920      	ldr	r1, [pc, #128]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a58:	400a      	ands	r2, r1
 8001a5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2201      	movs	r2, #1
 8001a62:	4013      	ands	r3, r2
 8001a64:	d009      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	4393      	bics	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	4013      	ands	r3, r2
 8001a82:	d009      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	2210      	movs	r2, #16
 8001a8a:	4393      	bics	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a94:	430a      	orrs	r2, r1
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d009      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	2240      	movs	r2, #64	; 0x40
 8001aaa:	4393      	bics	r3, r2
 8001aac:	0019      	movs	r1, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	0018      	movs	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b006      	add	sp, #24
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40007000 	.word	0x40007000
 8001acc:	fffffcff 	.word	0xfffffcff
 8001ad0:	fffeffff 	.word	0xfffeffff
 8001ad4:	00001388 	.word	0x00001388
 8001ad8:	efffffff 	.word	0xefffffff

08001adc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0a8      	b.n	8001c40 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	2382      	movs	r3, #130	; 0x82
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d009      	beq.n	8001b16 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
 8001b08:	e005      	b.n	8001b16 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	225d      	movs	r2, #93	; 0x5d
 8001b20:	5c9b      	ldrb	r3, [r3, r2]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d107      	bne.n	8001b38 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	225c      	movs	r2, #92	; 0x5c
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7fe ff02 	bl	800093c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	225d      	movs	r2, #93	; 0x5d
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2140      	movs	r1, #64	; 0x40
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	23e0      	movs	r3, #224	; 0xe0
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d902      	bls.n	8001b62 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e002      	b.n	8001b68 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	015b      	lsls	r3, r3, #5
 8001b66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	23f0      	movs	r3, #240	; 0xf0
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d008      	beq.n	8001b86 <HAL_SPI_Init+0xaa>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	23e0      	movs	r3, #224	; 0xe0
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d002      	beq.n	8001b86 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	2382      	movs	r3, #130	; 0x82
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6899      	ldr	r1, [r3, #8]
 8001b94:	2384      	movs	r3, #132	; 0x84
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	400b      	ands	r3, r1
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	2101      	movs	r1, #1
 8001bac:	400b      	ands	r3, r1
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6999      	ldr	r1, [r3, #24]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	400b      	ands	r3, r1
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	2138      	movs	r1, #56	; 0x38
 8001bc2:	400b      	ands	r3, r1
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	400b      	ands	r3, r1
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	0011      	movs	r1, r2
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	019b      	lsls	r3, r3, #6
 8001bda:	401a      	ands	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	2204      	movs	r2, #4
 8001bec:	401a      	ands	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	2110      	movs	r1, #16
 8001bf4:	400b      	ands	r3, r1
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfc:	2108      	movs	r1, #8
 8001bfe:	400b      	ands	r3, r1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68d9      	ldr	r1, [r3, #12]
 8001c06:	23f0      	movs	r3, #240	; 0xf0
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	400b      	ands	r3, r1
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	0011      	movs	r1, r2
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	015b      	lsls	r3, r3, #5
 8001c16:	401a      	ands	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4907      	ldr	r1, [pc, #28]	; (8001c48 <HAL_SPI_Init+0x16c>)
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	225d      	movs	r2, #93	; 0x5d
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b004      	add	sp, #16
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	fffff7ff 	.word	0xfffff7ff

08001c4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	001a      	movs	r2, r3
 8001c5a:	1cbb      	adds	r3, r7, #2
 8001c5c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c62:	2323      	movs	r3, #35	; 0x23
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	225c      	movs	r2, #92	; 0x5c
 8001c6e:	5c9b      	ldrb	r3, [r3, r2]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_SPI_TransmitReceive+0x2c>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e1b5      	b.n	8001fe4 <HAL_SPI_TransmitReceive+0x398>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	225c      	movs	r2, #92	; 0x5c
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c80:	f7fe ff96 	bl	8000bb0 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c88:	201b      	movs	r0, #27
 8001c8a:	183b      	adds	r3, r7, r0
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	215d      	movs	r1, #93	; 0x5d
 8001c90:	5c52      	ldrb	r2, [r2, r1]
 8001c92:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001c9a:	2312      	movs	r3, #18
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	1cba      	adds	r2, r7, #2
 8001ca0:	8812      	ldrh	r2, [r2, #0]
 8001ca2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ca4:	183b      	adds	r3, r7, r0
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d011      	beq.n	8001cd0 <HAL_SPI_TransmitReceive+0x84>
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	2382      	movs	r3, #130	; 0x82
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d107      	bne.n	8001cc6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <HAL_SPI_TransmitReceive+0x7a>
 8001cbe:	183b      	adds	r3, r7, r0
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d004      	beq.n	8001cd0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001cc6:	2323      	movs	r3, #35	; 0x23
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	2202      	movs	r2, #2
 8001ccc:	701a      	strb	r2, [r3, #0]
    goto error;
 8001cce:	e17e      	b.n	8001fce <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_SPI_TransmitReceive+0x98>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_SPI_TransmitReceive+0x98>
 8001cdc:	1cbb      	adds	r3, r7, #2
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d104      	bne.n	8001cee <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001ce4:	2323      	movs	r3, #35	; 0x23
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
    goto error;
 8001cec:	e16f      	b.n	8001fce <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	225d      	movs	r2, #93	; 0x5d
 8001cf2:	5c9b      	ldrb	r3, [r3, r2]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d003      	beq.n	8001d02 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	225d      	movs	r2, #93	; 0x5d
 8001cfe:	2105      	movs	r1, #5
 8001d00:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1cba      	adds	r2, r7, #2
 8001d12:	2146      	movs	r1, #70	; 0x46
 8001d14:	8812      	ldrh	r2, [r2, #0]
 8001d16:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1cba      	adds	r2, r7, #2
 8001d1c:	2144      	movs	r1, #68	; 0x44
 8001d1e:	8812      	ldrh	r2, [r2, #0]
 8001d20:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1cba      	adds	r2, r7, #2
 8001d2c:	8812      	ldrh	r2, [r2, #0]
 8001d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1cba      	adds	r2, r7, #2
 8001d34:	8812      	ldrh	r2, [r2, #0]
 8001d36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	23e0      	movs	r3, #224	; 0xe0
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d908      	bls.n	8001d62 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	49a4      	ldr	r1, [pc, #656]	; (8001fec <HAL_SPI_TransmitReceive+0x3a0>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	e008      	b.n	8001d74 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	0149      	lsls	r1, r1, #5
 8001d70:	430a      	orrs	r2, r1
 8001d72:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2240      	movs	r2, #64	; 0x40
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b40      	cmp	r3, #64	; 0x40
 8001d80:	d007      	beq.n	8001d92 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2140      	movs	r1, #64	; 0x40
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	23e0      	movs	r3, #224	; 0xe0
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d800      	bhi.n	8001da0 <HAL_SPI_TransmitReceive+0x154>
 8001d9e:	e07f      	b.n	8001ea0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_SPI_TransmitReceive+0x168>
 8001da8:	2312      	movs	r3, #18
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d000      	beq.n	8001db4 <HAL_SPI_TransmitReceive+0x168>
 8001db2:	e069      	b.n	8001e88 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	881a      	ldrh	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc4:	1c9a      	adds	r2, r3, #2
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dd8:	e056      	b.n	8001e88 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2202      	movs	r2, #2
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d11b      	bne.n	8001e20 <HAL_SPI_TransmitReceive+0x1d4>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d016      	beq.n	8001e20 <HAL_SPI_TransmitReceive+0x1d4>
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d113      	bne.n	8001e20 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	881a      	ldrh	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e08:	1c9a      	adds	r2, r3, #2
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2201      	movs	r2, #1
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d11c      	bne.n	8001e68 <HAL_SPI_TransmitReceive+0x21c>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2246      	movs	r2, #70	; 0x46
 8001e32:	5a9b      	ldrh	r3, [r3, r2]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	b292      	uxth	r2, r2
 8001e46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	1c9a      	adds	r2, r3, #2
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2246      	movs	r2, #70	; 0x46
 8001e56:	5a9b      	ldrh	r3, [r3, r2]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b299      	uxth	r1, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2246      	movs	r2, #70	; 0x46
 8001e62:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e64:	2301      	movs	r3, #1
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e68:	f7fe fea2 	bl	8000bb0 <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d807      	bhi.n	8001e88 <HAL_SPI_TransmitReceive+0x23c>
 8001e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	d004      	beq.n	8001e88 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8001e7e:	2323      	movs	r3, #35	; 0x23
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2203      	movs	r2, #3
 8001e84:	701a      	strb	r2, [r3, #0]
        goto error;
 8001e86:	e0a2      	b.n	8001fce <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1a3      	bne.n	8001dda <HAL_SPI_TransmitReceive+0x18e>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2246      	movs	r2, #70	; 0x46
 8001e96:	5a9b      	ldrh	r3, [r3, r2]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d19d      	bne.n	8001dda <HAL_SPI_TransmitReceive+0x18e>
 8001e9e:	e085      	b.n	8001fac <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_SPI_TransmitReceive+0x268>
 8001ea8:	2312      	movs	r3, #18
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d000      	beq.n	8001eb4 <HAL_SPI_TransmitReceive+0x268>
 8001eb2:	e070      	b.n	8001f96 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	7812      	ldrb	r2, [r2, #0]
 8001ec0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001eda:	e05c      	b.n	8001f96 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d11c      	bne.n	8001f24 <HAL_SPI_TransmitReceive+0x2d8>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d017      	beq.n	8001f24 <HAL_SPI_TransmitReceive+0x2d8>
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d114      	bne.n	8001f24 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	330c      	adds	r3, #12
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d11e      	bne.n	8001f70 <HAL_SPI_TransmitReceive+0x324>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2246      	movs	r2, #70	; 0x46
 8001f36:	5a9b      	ldrh	r3, [r3, r2]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d018      	beq.n	8001f70 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	330c      	adds	r3, #12
 8001f44:	001a      	movs	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	7812      	ldrb	r2, [r2, #0]
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2246      	movs	r2, #70	; 0x46
 8001f5e:	5a9b      	ldrh	r3, [r3, r2]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b299      	uxth	r1, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2246      	movs	r2, #70	; 0x46
 8001f6a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f70:	f7fe fe1e 	bl	8000bb0 <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d802      	bhi.n	8001f86 <HAL_SPI_TransmitReceive+0x33a>
 8001f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f82:	3301      	adds	r3, #1
 8001f84:	d102      	bne.n	8001f8c <HAL_SPI_TransmitReceive+0x340>
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d104      	bne.n	8001f96 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8001f8c:	2323      	movs	r3, #35	; 0x23
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2203      	movs	r2, #3
 8001f92:	701a      	strb	r2, [r3, #0]
        goto error;
 8001f94:	e01b      	b.n	8001fce <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d19d      	bne.n	8001edc <HAL_SPI_TransmitReceive+0x290>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2246      	movs	r2, #70	; 0x46
 8001fa4:	5a9b      	ldrh	r3, [r3, r2]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d197      	bne.n	8001edc <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 f94c 	bl	8002250 <SPI_EndRxTxTransaction>
 8001fb8:	1e03      	subs	r3, r0, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8001fbc:	2323      	movs	r3, #35	; 0x23
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	661a      	str	r2, [r3, #96]	; 0x60
 8001fca:	e000      	b.n	8001fce <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8001fcc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	225d      	movs	r2, #93	; 0x5d
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	225c      	movs	r2, #92	; 0x5c
 8001fda:	2100      	movs	r1, #0
 8001fdc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001fde:	2323      	movs	r3, #35	; 0x23
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	781b      	ldrb	r3, [r3, #0]
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b00a      	add	sp, #40	; 0x28
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	ffffefff 	.word	0xffffefff

08001ff0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	1dfb      	adds	r3, r7, #7
 8001ffe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002000:	f7fe fdd6 	bl	8000bb0 <HAL_GetTick>
 8002004:	0002      	movs	r2, r0
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	18d3      	adds	r3, r2, r3
 800200e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002010:	f7fe fdce 	bl	8000bb0 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002018:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	015b      	lsls	r3, r3, #5
 800201e:	0d1b      	lsrs	r3, r3, #20
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	4353      	muls	r3, r2
 8002024:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002026:	e058      	b.n	80020da <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	d055      	beq.n	80020da <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800202e:	f7fe fdbf 	bl	8000bb0 <HAL_GetTick>
 8002032:	0002      	movs	r2, r0
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	429a      	cmp	r2, r3
 800203c:	d902      	bls.n	8002044 <SPI_WaitFlagStateUntilTimeout+0x54>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d142      	bne.n	80020ca <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	21e0      	movs	r1, #224	; 0xe0
 8002050:	438a      	bics	r2, r1
 8002052:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	2382      	movs	r3, #130	; 0x82
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	429a      	cmp	r2, r3
 800205e:	d113      	bne.n	8002088 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	429a      	cmp	r2, r3
 800206a:	d005      	beq.n	8002078 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	429a      	cmp	r2, r3
 8002076:	d107      	bne.n	8002088 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2140      	movs	r1, #64	; 0x40
 8002084:	438a      	bics	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	019b      	lsls	r3, r3, #6
 8002090:	429a      	cmp	r2, r3
 8002092:	d110      	bne.n	80020b6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	491a      	ldr	r1, [pc, #104]	; (8002108 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80020a0:	400a      	ands	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	0189      	lsls	r1, r1, #6
 80020b2:	430a      	orrs	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	225d      	movs	r2, #93	; 0x5d
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	225c      	movs	r2, #92	; 0x5c
 80020c2:	2100      	movs	r1, #0
 80020c4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e017      	b.n	80020fa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	4013      	ands	r3, r2
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	425a      	negs	r2, r3
 80020ea:	4153      	adcs	r3, r2
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	001a      	movs	r2, r3
 80020f0:	1dfb      	adds	r3, r7, #7
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d197      	bne.n	8002028 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b008      	add	sp, #32
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	20000000 	.word	0x20000000
 8002108:	ffffdfff 	.word	0xffffdfff

0800210c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800211a:	2317      	movs	r3, #23
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002122:	f7fe fd45 	bl	8000bb0 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	18d3      	adds	r3, r2, r3
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002132:	f7fe fd3d 	bl	8000bb0 <HAL_GetTick>
 8002136:	0003      	movs	r3, r0
 8002138:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	330c      	adds	r3, #12
 8002140:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	0013      	movs	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	189b      	adds	r3, r3, r2
 800214c:	00da      	lsls	r2, r3, #3
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	0d1b      	lsrs	r3, r3, #20
 8002152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002154:	4353      	muls	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002158:	e068      	b.n	800222c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	23c0      	movs	r3, #192	; 0xc0
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	429a      	cmp	r2, r3
 8002162:	d10a      	bne.n	800217a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d107      	bne.n	800217a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	2117      	movs	r1, #23
 8002172:	187b      	adds	r3, r7, r1
 8002174:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002176:	187b      	adds	r3, r7, r1
 8002178:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	d055      	beq.n	800222c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002180:	f7fe fd16 	bl	8000bb0 <HAL_GetTick>
 8002184:	0002      	movs	r2, r0
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218c:	429a      	cmp	r2, r3
 800218e:	d902      	bls.n	8002196 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	2b00      	cmp	r3, #0
 8002194:	d142      	bne.n	800221c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	21e0      	movs	r1, #224	; 0xe0
 80021a2:	438a      	bics	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	2382      	movs	r3, #130	; 0x82
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d113      	bne.n	80021da <SPI_WaitFifoStateUntilTimeout+0xce>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d005      	beq.n	80021ca <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d107      	bne.n	80021da <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	438a      	bics	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	019b      	lsls	r3, r3, #6
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d110      	bne.n	8002208 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4916      	ldr	r1, [pc, #88]	; (800224c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80021f2:	400a      	ands	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	0189      	lsls	r1, r1, #6
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	225d      	movs	r2, #93	; 0x5d
 800220c:	2101      	movs	r1, #1
 800220e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	225c      	movs	r2, #92	; 0x5c
 8002214:	2100      	movs	r1, #0
 8002216:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e010      	b.n	800223e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	3b01      	subs	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	4013      	ands	r3, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	d18e      	bne.n	800215a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	b00a      	add	sp, #40	; 0x28
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	20000000 	.word	0x20000000
 800224c:	ffffdfff 	.word	0xffffdfff

08002250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	23c0      	movs	r3, #192	; 0xc0
 8002260:	0159      	lsls	r1, r3, #5
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	0013      	movs	r3, r2
 800226a:	2200      	movs	r2, #0
 800226c:	f7ff ff4e 	bl	800210c <SPI_WaitFifoStateUntilTimeout>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d007      	beq.n	8002284 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002278:	2220      	movs	r2, #32
 800227a:	431a      	orrs	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e027      	b.n	80022d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	0013      	movs	r3, r2
 800228e:	2200      	movs	r2, #0
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	f7ff fead 	bl	8001ff0 <SPI_WaitFlagStateUntilTimeout>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d007      	beq.n	80022aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229e:	2220      	movs	r2, #32
 80022a0:	431a      	orrs	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e014      	b.n	80022d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	23c0      	movs	r3, #192	; 0xc0
 80022ae:	00d9      	lsls	r1, r3, #3
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	0013      	movs	r3, r2
 80022b8:	2200      	movs	r2, #0
 80022ba:	f7ff ff27 	bl	800210c <SPI_WaitFifoStateUntilTimeout>
 80022be:	1e03      	subs	r3, r0, #0
 80022c0:	d007      	beq.n	80022d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c6:	2220      	movs	r2, #32
 80022c8:	431a      	orrs	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e000      	b.n	80022d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e044      	b.n	8002378 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d107      	bne.n	8002306 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2274      	movs	r2, #116	; 0x74
 80022fa:	2100      	movs	r1, #0
 80022fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0018      	movs	r0, r3
 8002302:	f7fe fb67 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2224      	movs	r2, #36	; 0x24
 800230a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2101      	movs	r1, #1
 8002318:	438a      	bics	r2, r1
 800231a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	0018      	movs	r0, r3
 8002320:	f000 f9b6 	bl	8002690 <UART_SetConfig>
 8002324:	0003      	movs	r3, r0
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e024      	b.n	8002378 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 fae9 	bl	8002910 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	490d      	ldr	r1, [pc, #52]	; (8002380 <HAL_UART_Init+0xa4>)
 800234a:	400a      	ands	r2, r1
 800234c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	212a      	movs	r1, #42	; 0x2a
 800235a:	438a      	bics	r2, r1
 800235c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2101      	movs	r1, #1
 800236a:	430a      	orrs	r2, r1
 800236c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 fb81 	bl	8002a78 <UART_CheckIdleState>
 8002376:	0003      	movs	r3, r0
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}
 8002380:	ffffb7ff 	.word	0xffffb7ff

08002384 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	1dbb      	adds	r3, r7, #6
 8002392:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002398:	2b20      	cmp	r3, #32
 800239a:	d000      	beq.n	800239e <HAL_UART_Transmit+0x1a>
 800239c:	e096      	b.n	80024cc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_UART_Transmit+0x28>
 80023a4:	1dbb      	adds	r3, r7, #6
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e08e      	b.n	80024ce <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	015b      	lsls	r3, r3, #5
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d109      	bne.n	80023d0 <HAL_UART_Transmit+0x4c>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4013      	ands	r3, r2
 80023ca:	d001      	beq.n	80023d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e07e      	b.n	80024ce <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2274      	movs	r2, #116	; 0x74
 80023d4:	5c9b      	ldrb	r3, [r3, r2]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_UART_Transmit+0x5a>
 80023da:	2302      	movs	r3, #2
 80023dc:	e077      	b.n	80024ce <HAL_UART_Transmit+0x14a>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2274      	movs	r2, #116	; 0x74
 80023e2:	2101      	movs	r1, #1
 80023e4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2280      	movs	r2, #128	; 0x80
 80023ea:	2100      	movs	r1, #0
 80023ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2221      	movs	r2, #33	; 0x21
 80023f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023f4:	f7fe fbdc 	bl	8000bb0 <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1dba      	adds	r2, r7, #6
 8002400:	2150      	movs	r1, #80	; 0x50
 8002402:	8812      	ldrh	r2, [r2, #0]
 8002404:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1dba      	adds	r2, r7, #6
 800240a:	2152      	movs	r1, #82	; 0x52
 800240c:	8812      	ldrh	r2, [r2, #0]
 800240e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	015b      	lsls	r3, r3, #5
 8002418:	429a      	cmp	r2, r3
 800241a:	d108      	bne.n	800242e <HAL_UART_Transmit+0xaa>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	e003      	b.n	8002436 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2274      	movs	r2, #116	; 0x74
 800243a:	2100      	movs	r1, #0
 800243c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800243e:	e02d      	b.n	800249c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	0013      	movs	r3, r2
 800244a:	2200      	movs	r2, #0
 800244c:	2180      	movs	r1, #128	; 0x80
 800244e:	f000 fb5b 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 8002452:	1e03      	subs	r3, r0, #0
 8002454:	d001      	beq.n	800245a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e039      	b.n	80024ce <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	881a      	ldrh	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	05d2      	lsls	r2, r2, #23
 800246a:	0dd2      	lsrs	r2, r2, #23
 800246c:	b292      	uxth	r2, r2
 800246e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	3302      	adds	r3, #2
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	e008      	b.n	800248a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	781a      	ldrb	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b292      	uxth	r2, r2
 8002482:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	3301      	adds	r3, #1
 8002488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2252      	movs	r2, #82	; 0x52
 800248e:	5a9b      	ldrh	r3, [r3, r2]
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b299      	uxth	r1, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2252      	movs	r2, #82	; 0x52
 800249a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2252      	movs	r2, #82	; 0x52
 80024a0:	5a9b      	ldrh	r3, [r3, r2]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1cb      	bne.n	8002440 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	0013      	movs	r3, r2
 80024b2:	2200      	movs	r2, #0
 80024b4:	2140      	movs	r1, #64	; 0x40
 80024b6:	f000 fb27 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 80024ba:	1e03      	subs	r3, r0, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e005      	b.n	80024ce <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e000      	b.n	80024ce <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80024cc:	2302      	movs	r3, #2
  }
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b008      	add	sp, #32
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	1dbb      	adds	r3, r7, #6
 80024e6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d000      	beq.n	80024f2 <HAL_UART_Receive+0x1a>
 80024f0:	e0c6      	b.n	8002680 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_UART_Receive+0x28>
 80024f8:	1dbb      	adds	r3, r7, #6
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0be      	b.n	8002682 <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	015b      	lsls	r3, r3, #5
 800250c:	429a      	cmp	r2, r3
 800250e:	d109      	bne.n	8002524 <HAL_UART_Receive+0x4c>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2201      	movs	r2, #1
 800251c:	4013      	ands	r3, r2
 800251e:	d001      	beq.n	8002524 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0ae      	b.n	8002682 <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2274      	movs	r2, #116	; 0x74
 8002528:	5c9b      	ldrb	r3, [r3, r2]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_UART_Receive+0x5a>
 800252e:	2302      	movs	r3, #2
 8002530:	e0a7      	b.n	8002682 <HAL_UART_Receive+0x1aa>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2274      	movs	r2, #116	; 0x74
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	2100      	movs	r1, #0
 8002540:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2222      	movs	r2, #34	; 0x22
 8002546:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800254e:	f7fe fb2f 	bl	8000bb0 <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1dba      	adds	r2, r7, #6
 800255a:	2158      	movs	r1, #88	; 0x58
 800255c:	8812      	ldrh	r2, [r2, #0]
 800255e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1dba      	adds	r2, r7, #6
 8002564:	215a      	movs	r1, #90	; 0x5a
 8002566:	8812      	ldrh	r2, [r2, #0]
 8002568:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	015b      	lsls	r3, r3, #5
 8002572:	429a      	cmp	r2, r3
 8002574:	d10d      	bne.n	8002592 <HAL_UART_Receive+0xba>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d104      	bne.n	8002588 <HAL_UART_Receive+0xb0>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	225c      	movs	r2, #92	; 0x5c
 8002582:	4942      	ldr	r1, [pc, #264]	; (800268c <HAL_UART_Receive+0x1b4>)
 8002584:	5299      	strh	r1, [r3, r2]
 8002586:	e01a      	b.n	80025be <HAL_UART_Receive+0xe6>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	225c      	movs	r2, #92	; 0x5c
 800258c:	21ff      	movs	r1, #255	; 0xff
 800258e:	5299      	strh	r1, [r3, r2]
 8002590:	e015      	b.n	80025be <HAL_UART_Receive+0xe6>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10d      	bne.n	80025b6 <HAL_UART_Receive+0xde>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d104      	bne.n	80025ac <HAL_UART_Receive+0xd4>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	225c      	movs	r2, #92	; 0x5c
 80025a6:	21ff      	movs	r1, #255	; 0xff
 80025a8:	5299      	strh	r1, [r3, r2]
 80025aa:	e008      	b.n	80025be <HAL_UART_Receive+0xe6>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	225c      	movs	r2, #92	; 0x5c
 80025b0:	217f      	movs	r1, #127	; 0x7f
 80025b2:	5299      	strh	r1, [r3, r2]
 80025b4:	e003      	b.n	80025be <HAL_UART_Receive+0xe6>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	225c      	movs	r2, #92	; 0x5c
 80025ba:	2100      	movs	r1, #0
 80025bc:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80025be:	2312      	movs	r3, #18
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	215c      	movs	r1, #92	; 0x5c
 80025c6:	5a52      	ldrh	r2, [r2, r1]
 80025c8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	015b      	lsls	r3, r3, #5
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d108      	bne.n	80025e8 <HAL_UART_Receive+0x110>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d104      	bne.n	80025e8 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	e003      	b.n	80025f0 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2274      	movs	r2, #116	; 0x74
 80025f4:	2100      	movs	r1, #0
 80025f6:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80025f8:	e037      	b.n	800266a <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	0013      	movs	r3, r2
 8002604:	2200      	movs	r2, #0
 8002606:	2120      	movs	r1, #32
 8002608:	f000 fa7e 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d001      	beq.n	8002614 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e036      	b.n	8002682 <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10e      	bne.n	8002638 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002620:	b29b      	uxth	r3, r3
 8002622:	2212      	movs	r2, #18
 8002624:	18ba      	adds	r2, r7, r2
 8002626:	8812      	ldrh	r2, [r2, #0]
 8002628:	4013      	ands	r3, r2
 800262a:	b29a      	uxth	r2, r3
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	3302      	adds	r3, #2
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	e00f      	b.n	8002658 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800263e:	b29b      	uxth	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2212      	movs	r2, #18
 8002644:	18ba      	adds	r2, r7, r2
 8002646:	8812      	ldrh	r2, [r2, #0]
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	4013      	ands	r3, r2
 800264c:	b2da      	uxtb	r2, r3
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3301      	adds	r3, #1
 8002656:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	225a      	movs	r2, #90	; 0x5a
 800265c:	5a9b      	ldrh	r3, [r3, r2]
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b299      	uxth	r1, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	225a      	movs	r2, #90	; 0x5a
 8002668:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	225a      	movs	r2, #90	; 0x5a
 800266e:	5a9b      	ldrh	r3, [r3, r2]
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1c1      	bne.n	80025fa <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e000      	b.n	8002682 <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8002680:	2302      	movs	r3, #2
  }
}
 8002682:	0018      	movs	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	b008      	add	sp, #32
 8002688:	bd80      	pop	{r7, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	000001ff 	.word	0x000001ff

08002690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002698:	231e      	movs	r3, #30
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a8d      	ldr	r2, [pc, #564]	; (80028f4 <UART_SetConfig+0x264>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a88      	ldr	r2, [pc, #544]	; (80028f8 <UART_SetConfig+0x268>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	0019      	movs	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	4a7f      	ldr	r2, [pc, #508]	; (80028fc <UART_SetConfig+0x26c>)
 80026fe:	4013      	ands	r3, r2
 8002700:	0019      	movs	r1, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a7b      	ldr	r2, [pc, #492]	; (8002900 <UART_SetConfig+0x270>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d127      	bne.n	8002766 <UART_SetConfig+0xd6>
 8002716:	4b7b      	ldr	r3, [pc, #492]	; (8002904 <UART_SetConfig+0x274>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	2203      	movs	r2, #3
 800271c:	4013      	ands	r3, r2
 800271e:	2b03      	cmp	r3, #3
 8002720:	d00d      	beq.n	800273e <UART_SetConfig+0xae>
 8002722:	d81b      	bhi.n	800275c <UART_SetConfig+0xcc>
 8002724:	2b02      	cmp	r3, #2
 8002726:	d014      	beq.n	8002752 <UART_SetConfig+0xc2>
 8002728:	d818      	bhi.n	800275c <UART_SetConfig+0xcc>
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <UART_SetConfig+0xa4>
 800272e:	2b01      	cmp	r3, #1
 8002730:	d00a      	beq.n	8002748 <UART_SetConfig+0xb8>
 8002732:	e013      	b.n	800275c <UART_SetConfig+0xcc>
 8002734:	231f      	movs	r3, #31
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	e021      	b.n	8002782 <UART_SetConfig+0xf2>
 800273e:	231f      	movs	r3, #31
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	2202      	movs	r2, #2
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	e01c      	b.n	8002782 <UART_SetConfig+0xf2>
 8002748:	231f      	movs	r3, #31
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	2204      	movs	r2, #4
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e017      	b.n	8002782 <UART_SetConfig+0xf2>
 8002752:	231f      	movs	r3, #31
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	2208      	movs	r2, #8
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	e012      	b.n	8002782 <UART_SetConfig+0xf2>
 800275c:	231f      	movs	r3, #31
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	2210      	movs	r2, #16
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	e00d      	b.n	8002782 <UART_SetConfig+0xf2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a67      	ldr	r2, [pc, #412]	; (8002908 <UART_SetConfig+0x278>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d104      	bne.n	800277a <UART_SetConfig+0xea>
 8002770:	231f      	movs	r3, #31
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e003      	b.n	8002782 <UART_SetConfig+0xf2>
 800277a:	231f      	movs	r3, #31
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	2210      	movs	r2, #16
 8002780:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	429a      	cmp	r2, r3
 800278c:	d15d      	bne.n	800284a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800278e:	231f      	movs	r3, #31
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b08      	cmp	r3, #8
 8002796:	d015      	beq.n	80027c4 <UART_SetConfig+0x134>
 8002798:	dc18      	bgt.n	80027cc <UART_SetConfig+0x13c>
 800279a:	2b04      	cmp	r3, #4
 800279c:	d00d      	beq.n	80027ba <UART_SetConfig+0x12a>
 800279e:	dc15      	bgt.n	80027cc <UART_SetConfig+0x13c>
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <UART_SetConfig+0x11a>
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d005      	beq.n	80027b4 <UART_SetConfig+0x124>
 80027a8:	e010      	b.n	80027cc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027aa:	f7ff f8a3 	bl	80018f4 <HAL_RCC_GetPCLK1Freq>
 80027ae:	0003      	movs	r3, r0
 80027b0:	61bb      	str	r3, [r7, #24]
        break;
 80027b2:	e012      	b.n	80027da <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027b4:	4b55      	ldr	r3, [pc, #340]	; (800290c <UART_SetConfig+0x27c>)
 80027b6:	61bb      	str	r3, [r7, #24]
        break;
 80027b8:	e00f      	b.n	80027da <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ba:	f7ff f82d 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 80027be:	0003      	movs	r3, r0
 80027c0:	61bb      	str	r3, [r7, #24]
        break;
 80027c2:	e00a      	b.n	80027da <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	61bb      	str	r3, [r7, #24]
        break;
 80027ca:	e006      	b.n	80027da <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027d0:	231e      	movs	r3, #30
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
        break;
 80027d8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d100      	bne.n	80027e2 <UART_SetConfig+0x152>
 80027e0:	e07b      	b.n	80028da <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	005a      	lsls	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	18d2      	adds	r2, r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0019      	movs	r1, r3
 80027f4:	0010      	movs	r0, r2
 80027f6:	f7fd fc87 	bl	8000108 <__udivsi3>
 80027fa:	0003      	movs	r3, r0
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	d91c      	bls.n	8002840 <UART_SetConfig+0x1b0>
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	025b      	lsls	r3, r3, #9
 800280c:	429a      	cmp	r2, r3
 800280e:	d217      	bcs.n	8002840 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	b29a      	uxth	r2, r3
 8002814:	200e      	movs	r0, #14
 8002816:	183b      	adds	r3, r7, r0
 8002818:	210f      	movs	r1, #15
 800281a:	438a      	bics	r2, r1
 800281c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	b29b      	uxth	r3, r3
 8002824:	2207      	movs	r2, #7
 8002826:	4013      	ands	r3, r2
 8002828:	b299      	uxth	r1, r3
 800282a:	183b      	adds	r3, r7, r0
 800282c:	183a      	adds	r2, r7, r0
 800282e:	8812      	ldrh	r2, [r2, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	183a      	adds	r2, r7, r0
 800283a:	8812      	ldrh	r2, [r2, #0]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	e04c      	b.n	80028da <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002840:	231e      	movs	r3, #30
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e047      	b.n	80028da <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800284a:	231f      	movs	r3, #31
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d015      	beq.n	8002880 <UART_SetConfig+0x1f0>
 8002854:	dc18      	bgt.n	8002888 <UART_SetConfig+0x1f8>
 8002856:	2b04      	cmp	r3, #4
 8002858:	d00d      	beq.n	8002876 <UART_SetConfig+0x1e6>
 800285a:	dc15      	bgt.n	8002888 <UART_SetConfig+0x1f8>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <UART_SetConfig+0x1d6>
 8002860:	2b02      	cmp	r3, #2
 8002862:	d005      	beq.n	8002870 <UART_SetConfig+0x1e0>
 8002864:	e010      	b.n	8002888 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002866:	f7ff f845 	bl	80018f4 <HAL_RCC_GetPCLK1Freq>
 800286a:	0003      	movs	r3, r0
 800286c:	61bb      	str	r3, [r7, #24]
        break;
 800286e:	e012      	b.n	8002896 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002870:	4b26      	ldr	r3, [pc, #152]	; (800290c <UART_SetConfig+0x27c>)
 8002872:	61bb      	str	r3, [r7, #24]
        break;
 8002874:	e00f      	b.n	8002896 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002876:	f7fe ffcf 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 800287a:	0003      	movs	r3, r0
 800287c:	61bb      	str	r3, [r7, #24]
        break;
 800287e:	e00a      	b.n	8002896 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	61bb      	str	r3, [r7, #24]
        break;
 8002886:	e006      	b.n	8002896 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800288c:	231e      	movs	r3, #30
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
        break;
 8002894:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d01e      	beq.n	80028da <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	085a      	lsrs	r2, r3, #1
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	18d2      	adds	r2, r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0019      	movs	r1, r3
 80028ac:	0010      	movs	r0, r2
 80028ae:	f7fd fc2b 	bl	8000108 <__udivsi3>
 80028b2:	0003      	movs	r3, r0
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b0f      	cmp	r3, #15
 80028bc:	d909      	bls.n	80028d2 <UART_SetConfig+0x242>
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	025b      	lsls	r3, r3, #9
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d204      	bcs.n	80028d2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	e003      	b.n	80028da <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80028d2:	231e      	movs	r3, #30
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80028e6:	231e      	movs	r3, #30
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	781b      	ldrb	r3, [r3, #0]
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b008      	add	sp, #32
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	ffff69f3 	.word	0xffff69f3
 80028f8:	ffffcfff 	.word	0xffffcfff
 80028fc:	fffff4ff 	.word	0xfffff4ff
 8002900:	40013800 	.word	0x40013800
 8002904:	40021000 	.word	0x40021000
 8002908:	40004400 	.word	0x40004400
 800290c:	007a1200 	.word	0x007a1200

08002910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	2201      	movs	r2, #1
 800291e:	4013      	ands	r3, r2
 8002920:	d00b      	beq.n	800293a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a4a      	ldr	r2, [pc, #296]	; (8002a54 <UART_AdvFeatureConfig+0x144>)
 800292a:	4013      	ands	r3, r2
 800292c:	0019      	movs	r1, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	d00b      	beq.n	800295c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4a43      	ldr	r2, [pc, #268]	; (8002a58 <UART_AdvFeatureConfig+0x148>)
 800294c:	4013      	ands	r3, r2
 800294e:	0019      	movs	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	2204      	movs	r2, #4
 8002962:	4013      	ands	r3, r2
 8002964:	d00b      	beq.n	800297e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a3b      	ldr	r2, [pc, #236]	; (8002a5c <UART_AdvFeatureConfig+0x14c>)
 800296e:	4013      	ands	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2208      	movs	r2, #8
 8002984:	4013      	ands	r3, r2
 8002986:	d00b      	beq.n	80029a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4a34      	ldr	r2, [pc, #208]	; (8002a60 <UART_AdvFeatureConfig+0x150>)
 8002990:	4013      	ands	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	2210      	movs	r2, #16
 80029a6:	4013      	ands	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a2c      	ldr	r2, [pc, #176]	; (8002a64 <UART_AdvFeatureConfig+0x154>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2220      	movs	r2, #32
 80029c8:	4013      	ands	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <UART_AdvFeatureConfig+0x158>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	2240      	movs	r2, #64	; 0x40
 80029ea:	4013      	ands	r3, r2
 80029ec:	d01d      	beq.n	8002a2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <UART_AdvFeatureConfig+0x15c>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	035b      	lsls	r3, r3, #13
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d10b      	bne.n	8002a2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <UART_AdvFeatureConfig+0x160>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	4013      	ands	r3, r2
 8002a32:	d00b      	beq.n	8002a4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <UART_AdvFeatureConfig+0x164>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	0019      	movs	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
  }
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	fffdffff 	.word	0xfffdffff
 8002a58:	fffeffff 	.word	0xfffeffff
 8002a5c:	fffbffff 	.word	0xfffbffff
 8002a60:	ffff7fff 	.word	0xffff7fff
 8002a64:	ffffefff 	.word	0xffffefff
 8002a68:	ffffdfff 	.word	0xffffdfff
 8002a6c:	ffefffff 	.word	0xffefffff
 8002a70:	ff9fffff 	.word	0xff9fffff
 8002a74:	fff7ffff 	.word	0xfff7ffff

08002a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	2100      	movs	r1, #0
 8002a86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a88:	f7fe f892 	bl	8000bb0 <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2208      	movs	r2, #8
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d10c      	bne.n	8002ab8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2280      	movs	r2, #128	; 0x80
 8002aa2:	0391      	lsls	r1, r2, #14
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <UART_CheckIdleState+0x8c>)
 8002aa8:	9200      	str	r2, [sp, #0]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f000 f82c 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e021      	b.n	8002afc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d10c      	bne.n	8002ae0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	03d1      	lsls	r1, r2, #15
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <UART_CheckIdleState+0x8c>)
 8002ad0:	9200      	str	r2, [sp, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f000 f818 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e00d      	b.n	8002afc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2274      	movs	r2, #116	; 0x74
 8002af6:	2100      	movs	r1, #0
 8002af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b004      	add	sp, #16
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	01ffffff 	.word	0x01ffffff

08002b08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b094      	sub	sp, #80	; 0x50
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	1dfb      	adds	r3, r7, #7
 8002b16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b18:	e0a3      	b.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	d100      	bne.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002b20:	e09f      	b.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b22:	f7fe f845 	bl	8000bb0 <HAL_GetTick>
 8002b26:	0002      	movs	r2, r0
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d13d      	bne.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b38:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b40:	647b      	str	r3, [r7, #68]	; 0x44
 8002b42:	2301      	movs	r3, #1
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	f383 8810 	msr	PRIMASK, r3
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	494c      	ldr	r1, [pc, #304]	; (8002c8c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b72:	643b      	str	r3, [r7, #64]	; 0x40
 8002b74:	2301      	movs	r3, #1
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	f383 8810 	msr	PRIMASK, r3
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	438a      	bics	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b96:	f383 8810 	msr	PRIMASK, r3
}
 8002b9a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2274      	movs	r2, #116	; 0x74
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e067      	b.n	8002c84 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d050      	beq.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	401a      	ands	r2, r3
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d146      	bne.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bde:	f3ef 8310 	mrs	r3, PRIMASK
 8002be2:	613b      	str	r3, [r7, #16]
  return(result);
 8002be4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be8:	2301      	movs	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f383 8810 	msr	PRIMASK, r3
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4923      	ldr	r1, [pc, #140]	; (8002c8c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002c00:	400a      	ands	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f383 8810 	msr	PRIMASK, r3
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c10:	f3ef 8310 	mrs	r3, PRIMASK
 8002c14:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c16:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	f383 8810 	msr	PRIMASK, r3
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	438a      	bics	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	f383 8810 	msr	PRIMASK, r3
}
 8002c40:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	2120      	movs	r1, #32
 8002c54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2274      	movs	r2, #116	; 0x74
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e010      	b.n	8002c84 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	425a      	negs	r2, r3
 8002c72:	4153      	adcs	r3, r2
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	001a      	movs	r2, r3
 8002c78:	1dfb      	adds	r3, r7, #7
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d100      	bne.n	8002c82 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002c80:	e74b      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	0018      	movs	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b014      	add	sp, #80	; 0x50
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	fffffe5f 	.word	0xfffffe5f

08002c90 <__libc_init_array>:
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	2600      	movs	r6, #0
 8002c94:	4d0c      	ldr	r5, [pc, #48]	; (8002cc8 <__libc_init_array+0x38>)
 8002c96:	4c0d      	ldr	r4, [pc, #52]	; (8002ccc <__libc_init_array+0x3c>)
 8002c98:	1b64      	subs	r4, r4, r5
 8002c9a:	10a4      	asrs	r4, r4, #2
 8002c9c:	42a6      	cmp	r6, r4
 8002c9e:	d109      	bne.n	8002cb4 <__libc_init_array+0x24>
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	f000 f821 	bl	8002ce8 <_init>
 8002ca6:	4d0a      	ldr	r5, [pc, #40]	; (8002cd0 <__libc_init_array+0x40>)
 8002ca8:	4c0a      	ldr	r4, [pc, #40]	; (8002cd4 <__libc_init_array+0x44>)
 8002caa:	1b64      	subs	r4, r4, r5
 8002cac:	10a4      	asrs	r4, r4, #2
 8002cae:	42a6      	cmp	r6, r4
 8002cb0:	d105      	bne.n	8002cbe <__libc_init_array+0x2e>
 8002cb2:	bd70      	pop	{r4, r5, r6, pc}
 8002cb4:	00b3      	lsls	r3, r6, #2
 8002cb6:	58eb      	ldr	r3, [r5, r3]
 8002cb8:	4798      	blx	r3
 8002cba:	3601      	adds	r6, #1
 8002cbc:	e7ee      	b.n	8002c9c <__libc_init_array+0xc>
 8002cbe:	00b3      	lsls	r3, r6, #2
 8002cc0:	58eb      	ldr	r3, [r5, r3]
 8002cc2:	4798      	blx	r3
 8002cc4:	3601      	adds	r6, #1
 8002cc6:	e7f2      	b.n	8002cae <__libc_init_array+0x1e>
 8002cc8:	08002d6c 	.word	0x08002d6c
 8002ccc:	08002d6c 	.word	0x08002d6c
 8002cd0:	08002d6c 	.word	0x08002d6c
 8002cd4:	08002d70 	.word	0x08002d70

08002cd8 <memset>:
 8002cd8:	0003      	movs	r3, r0
 8002cda:	1882      	adds	r2, r0, r2
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d100      	bne.n	8002ce2 <memset+0xa>
 8002ce0:	4770      	bx	lr
 8002ce2:	7019      	strb	r1, [r3, #0]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	e7f9      	b.n	8002cdc <memset+0x4>

08002ce8 <_init>:
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cee:	bc08      	pop	{r3}
 8002cf0:	469e      	mov	lr, r3
 8002cf2:	4770      	bx	lr

08002cf4 <_fini>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfa:	bc08      	pop	{r3}
 8002cfc:	469e      	mov	lr, r3
 8002cfe:	4770      	bx	lr
